//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Perfect.Inventory.Core.Inventory.Inventory.Summary.DS {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsSummary")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsSummary : global::System.Data.DataSet {
        
        private INVENTORY_DETAIL_SUMMARYDataTable tableINVENTORY_DETAIL_SUMMARY;
        
        private INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICEDataTable tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public dsSummary() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected dsSummary(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["INVENTORY_DETAIL_SUMMARY"] != null)) {
                    base.Tables.Add(new INVENTORY_DETAIL_SUMMARYDataTable(ds.Tables["INVENTORY_DETAIL_SUMMARY"]));
                }
                if ((ds.Tables["INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE"] != null)) {
                    base.Tables.Add(new INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICEDataTable(ds.Tables["INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public INVENTORY_DETAIL_SUMMARYDataTable INVENTORY_DETAIL_SUMMARY {
            get {
                return this.tableINVENTORY_DETAIL_SUMMARY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICEDataTable INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE {
            get {
                return this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            dsSummary cln = ((dsSummary)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["INVENTORY_DETAIL_SUMMARY"] != null)) {
                    base.Tables.Add(new INVENTORY_DETAIL_SUMMARYDataTable(ds.Tables["INVENTORY_DETAIL_SUMMARY"]));
                }
                if ((ds.Tables["INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE"] != null)) {
                    base.Tables.Add(new INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICEDataTable(ds.Tables["INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableINVENTORY_DETAIL_SUMMARY = ((INVENTORY_DETAIL_SUMMARYDataTable)(base.Tables["INVENTORY_DETAIL_SUMMARY"]));
            if ((initTable == true)) {
                if ((this.tableINVENTORY_DETAIL_SUMMARY != null)) {
                    this.tableINVENTORY_DETAIL_SUMMARY.InitVars();
                }
            }
            this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE = ((INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICEDataTable)(base.Tables["INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE"]));
            if ((initTable == true)) {
                if ((this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE != null)) {
                    this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass() {
            this.DataSetName = "dsSummary";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsSummary.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableINVENTORY_DETAIL_SUMMARY = new INVENTORY_DETAIL_SUMMARYDataTable();
            base.Tables.Add(this.tableINVENTORY_DETAIL_SUMMARY);
            this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE = new INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICEDataTable();
            base.Tables.Add(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeINVENTORY_DETAIL_SUMMARY() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsSummary ds = new dsSummary();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void INVENTORY_DETAIL_SUMMARYRowChangeEventHandler(object sender, INVENTORY_DETAIL_SUMMARYRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowChangeEventHandler(object sender, INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class INVENTORY_DETAIL_SUMMARYDataTable : global::System.Data.TypedTableBase<INVENTORY_DETAIL_SUMMARYRow> {
            
            private global::System.Data.DataColumn columnProductID;
            
            private global::System.Data.DataColumn columnProductName;
            
            private global::System.Data.DataColumn columnUnit_Name;
            
            private global::System.Data.DataColumn columnStockID;
            
            private global::System.Data.DataColumn columnStock_Name;
            
            private global::System.Data.DataColumn columnProductGroupID;
            
            private global::System.Data.DataColumn columnProductGroup_Name;
            
            private global::System.Data.DataColumn columnOpenQuantity;
            
            private global::System.Data.DataColumn columnOpenAmount;
            
            private global::System.Data.DataColumn columnInQuantity;
            
            private global::System.Data.DataColumn columnInAmount;
            
            private global::System.Data.DataColumn columnOutQuantity;
            
            private global::System.Data.DataColumn columnOutAmount;
            
            private global::System.Data.DataColumn columnTotalIOQuantity;
            
            private global::System.Data.DataColumn columnTotalIOAmount;
            
            private global::System.Data.DataColumn columnProfitAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public INVENTORY_DETAIL_SUMMARYDataTable() {
                this.TableName = "INVENTORY_DETAIL_SUMMARY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal INVENTORY_DETAIL_SUMMARYDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected INVENTORY_DETAIL_SUMMARYDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProductIDColumn {
                get {
                    return this.columnProductID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProductNameColumn {
                get {
                    return this.columnProductName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Unit_NameColumn {
                get {
                    return this.columnUnit_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn StockIDColumn {
                get {
                    return this.columnStockID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Stock_NameColumn {
                get {
                    return this.columnStock_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProductGroupIDColumn {
                get {
                    return this.columnProductGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProductGroup_NameColumn {
                get {
                    return this.columnProductGroup_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn OpenQuantityColumn {
                get {
                    return this.columnOpenQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn OpenAmountColumn {
                get {
                    return this.columnOpenAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn InQuantityColumn {
                get {
                    return this.columnInQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn InAmountColumn {
                get {
                    return this.columnInAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn OutQuantityColumn {
                get {
                    return this.columnOutQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn OutAmountColumn {
                get {
                    return this.columnOutAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TotalIOQuantityColumn {
                get {
                    return this.columnTotalIOQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TotalIOAmountColumn {
                get {
                    return this.columnTotalIOAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProfitAmountColumn {
                get {
                    return this.columnProfitAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public INVENTORY_DETAIL_SUMMARYRow this[int index] {
                get {
                    return ((INVENTORY_DETAIL_SUMMARYRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event INVENTORY_DETAIL_SUMMARYRowChangeEventHandler INVENTORY_DETAIL_SUMMARYRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event INVENTORY_DETAIL_SUMMARYRowChangeEventHandler INVENTORY_DETAIL_SUMMARYRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event INVENTORY_DETAIL_SUMMARYRowChangeEventHandler INVENTORY_DETAIL_SUMMARYRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event INVENTORY_DETAIL_SUMMARYRowChangeEventHandler INVENTORY_DETAIL_SUMMARYRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddINVENTORY_DETAIL_SUMMARYRow(INVENTORY_DETAIL_SUMMARYRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public INVENTORY_DETAIL_SUMMARYRow AddINVENTORY_DETAIL_SUMMARYRow(
                        string ProductID, 
                        string ProductName, 
                        string Unit_Name, 
                        string StockID, 
                        string Stock_Name, 
                        string ProductGroupID, 
                        string ProductGroup_Name, 
                        decimal OpenQuantity, 
                        decimal OpenAmount, 
                        decimal InQuantity, 
                        decimal InAmount, 
                        decimal OutQuantity, 
                        decimal OutAmount, 
                        decimal TotalIOQuantity, 
                        decimal TotalIOAmount, 
                        decimal ProfitAmount) {
                INVENTORY_DETAIL_SUMMARYRow rowINVENTORY_DETAIL_SUMMARYRow = ((INVENTORY_DETAIL_SUMMARYRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProductID,
                        ProductName,
                        Unit_Name,
                        StockID,
                        Stock_Name,
                        ProductGroupID,
                        ProductGroup_Name,
                        OpenQuantity,
                        OpenAmount,
                        InQuantity,
                        InAmount,
                        OutQuantity,
                        OutAmount,
                        TotalIOQuantity,
                        TotalIOAmount,
                        ProfitAmount};
                rowINVENTORY_DETAIL_SUMMARYRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowINVENTORY_DETAIL_SUMMARYRow);
                return rowINVENTORY_DETAIL_SUMMARYRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                INVENTORY_DETAIL_SUMMARYDataTable cln = ((INVENTORY_DETAIL_SUMMARYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new INVENTORY_DETAIL_SUMMARYDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnProductID = base.Columns["ProductID"];
                this.columnProductName = base.Columns["ProductName"];
                this.columnUnit_Name = base.Columns["Unit_Name"];
                this.columnStockID = base.Columns["StockID"];
                this.columnStock_Name = base.Columns["Stock_Name"];
                this.columnProductGroupID = base.Columns["ProductGroupID"];
                this.columnProductGroup_Name = base.Columns["ProductGroup_Name"];
                this.columnOpenQuantity = base.Columns["OpenQuantity"];
                this.columnOpenAmount = base.Columns["OpenAmount"];
                this.columnInQuantity = base.Columns["InQuantity"];
                this.columnInAmount = base.Columns["InAmount"];
                this.columnOutQuantity = base.Columns["OutQuantity"];
                this.columnOutAmount = base.Columns["OutAmount"];
                this.columnTotalIOQuantity = base.Columns["TotalIOQuantity"];
                this.columnTotalIOAmount = base.Columns["TotalIOAmount"];
                this.columnProfitAmount = base.Columns["ProfitAmount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnProductID = new global::System.Data.DataColumn("ProductID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductID);
                this.columnProductName = new global::System.Data.DataColumn("ProductName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductName);
                this.columnUnit_Name = new global::System.Data.DataColumn("Unit_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit_Name);
                this.columnStockID = new global::System.Data.DataColumn("StockID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockID);
                this.columnStock_Name = new global::System.Data.DataColumn("Stock_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStock_Name);
                this.columnProductGroupID = new global::System.Data.DataColumn("ProductGroupID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductGroupID);
                this.columnProductGroup_Name = new global::System.Data.DataColumn("ProductGroup_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductGroup_Name);
                this.columnOpenQuantity = new global::System.Data.DataColumn("OpenQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpenQuantity);
                this.columnOpenAmount = new global::System.Data.DataColumn("OpenAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpenAmount);
                this.columnInQuantity = new global::System.Data.DataColumn("InQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInQuantity);
                this.columnInAmount = new global::System.Data.DataColumn("InAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInAmount);
                this.columnOutQuantity = new global::System.Data.DataColumn("OutQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutQuantity);
                this.columnOutAmount = new global::System.Data.DataColumn("OutAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutAmount);
                this.columnTotalIOQuantity = new global::System.Data.DataColumn("TotalIOQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalIOQuantity);
                this.columnTotalIOAmount = new global::System.Data.DataColumn("TotalIOAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalIOAmount);
                this.columnProfitAmount = new global::System.Data.DataColumn("ProfitAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProfitAmount);
                this.columnProductID.MaxLength = 20;
                this.columnProductName.MaxLength = 255;
                this.columnUnit_Name.MaxLength = 250;
                this.columnStockID.MaxLength = 20;
                this.columnStock_Name.MaxLength = 255;
                this.columnProductGroupID.MaxLength = 20;
                this.columnProductGroup_Name.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public INVENTORY_DETAIL_SUMMARYRow NewINVENTORY_DETAIL_SUMMARYRow() {
                return ((INVENTORY_DETAIL_SUMMARYRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new INVENTORY_DETAIL_SUMMARYRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(INVENTORY_DETAIL_SUMMARYRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.INVENTORY_DETAIL_SUMMARYRowChanged != null)) {
                    this.INVENTORY_DETAIL_SUMMARYRowChanged(this, new INVENTORY_DETAIL_SUMMARYRowChangeEvent(((INVENTORY_DETAIL_SUMMARYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.INVENTORY_DETAIL_SUMMARYRowChanging != null)) {
                    this.INVENTORY_DETAIL_SUMMARYRowChanging(this, new INVENTORY_DETAIL_SUMMARYRowChangeEvent(((INVENTORY_DETAIL_SUMMARYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.INVENTORY_DETAIL_SUMMARYRowDeleted != null)) {
                    this.INVENTORY_DETAIL_SUMMARYRowDeleted(this, new INVENTORY_DETAIL_SUMMARYRowChangeEvent(((INVENTORY_DETAIL_SUMMARYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.INVENTORY_DETAIL_SUMMARYRowDeleting != null)) {
                    this.INVENTORY_DETAIL_SUMMARYRowDeleting(this, new INVENTORY_DETAIL_SUMMARYRowChangeEvent(((INVENTORY_DETAIL_SUMMARYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveINVENTORY_DETAIL_SUMMARYRow(INVENTORY_DETAIL_SUMMARYRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSummary ds = new dsSummary();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "INVENTORY_DETAIL_SUMMARYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICEDataTable : global::System.Data.TypedTableBase<INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow> {
            
            private global::System.Data.DataColumn columnProductID;
            
            private global::System.Data.DataColumn columnProductName;
            
            private global::System.Data.DataColumn columnUnit_Name;
            
            private global::System.Data.DataColumn columnStockID;
            
            private global::System.Data.DataColumn columnStock_Name;
            
            private global::System.Data.DataColumn columnProductGroupID;
            
            private global::System.Data.DataColumn columnProductGroup_Name;
            
            private global::System.Data.DataColumn columnOpenQuantity;
            
            private global::System.Data.DataColumn columnOpenAmount;
            
            private global::System.Data.DataColumn columnOpenAVGAmount;
            
            private global::System.Data.DataColumn columnInQuantity;
            
            private global::System.Data.DataColumn columnInAmount;
            
            private global::System.Data.DataColumn columnInAVGAmount;
            
            private global::System.Data.DataColumn columnOutQuantity;
            
            private global::System.Data.DataColumn columnOutAmount;
            
            private global::System.Data.DataColumn columnOutAVGAmount;
            
            private global::System.Data.DataColumn columnOnhandQuantity;
            
            private global::System.Data.DataColumn columnCloseAmount;
            
            private global::System.Data.DataColumn columnCloseAVGAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICEDataTable() {
                this.TableName = "INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProductIDColumn {
                get {
                    return this.columnProductID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProductNameColumn {
                get {
                    return this.columnProductName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Unit_NameColumn {
                get {
                    return this.columnUnit_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn StockIDColumn {
                get {
                    return this.columnStockID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Stock_NameColumn {
                get {
                    return this.columnStock_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProductGroupIDColumn {
                get {
                    return this.columnProductGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProductGroup_NameColumn {
                get {
                    return this.columnProductGroup_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn OpenQuantityColumn {
                get {
                    return this.columnOpenQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn OpenAmountColumn {
                get {
                    return this.columnOpenAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn OpenAVGAmountColumn {
                get {
                    return this.columnOpenAVGAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn InQuantityColumn {
                get {
                    return this.columnInQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn InAmountColumn {
                get {
                    return this.columnInAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn InAVGAmountColumn {
                get {
                    return this.columnInAVGAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn OutQuantityColumn {
                get {
                    return this.columnOutQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn OutAmountColumn {
                get {
                    return this.columnOutAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn OutAVGAmountColumn {
                get {
                    return this.columnOutAVGAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn OnhandQuantityColumn {
                get {
                    return this.columnOnhandQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CloseAmountColumn {
                get {
                    return this.columnCloseAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CloseAVGAmountColumn {
                get {
                    return this.columnCloseAVGAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow this[int index] {
                get {
                    return ((INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowChangeEventHandler INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowChangeEventHandler INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowChangeEventHandler INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowChangeEventHandler INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow(INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow AddINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow(
                        string ProductID, 
                        string ProductName, 
                        string Unit_Name, 
                        string StockID, 
                        string Stock_Name, 
                        string ProductGroupID, 
                        string ProductGroup_Name, 
                        decimal OpenQuantity, 
                        decimal OpenAmount, 
                        decimal OpenAVGAmount, 
                        decimal InQuantity, 
                        decimal InAmount, 
                        decimal InAVGAmount, 
                        decimal OutQuantity, 
                        decimal OutAmount, 
                        decimal OutAVGAmount, 
                        decimal OnhandQuantity, 
                        decimal CloseAmount, 
                        decimal CloseAVGAmount) {
                INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow rowINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow = ((INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProductID,
                        ProductName,
                        Unit_Name,
                        StockID,
                        Stock_Name,
                        ProductGroupID,
                        ProductGroup_Name,
                        OpenQuantity,
                        OpenAmount,
                        OpenAVGAmount,
                        InQuantity,
                        InAmount,
                        InAVGAmount,
                        OutQuantity,
                        OutAmount,
                        OutAVGAmount,
                        OnhandQuantity,
                        CloseAmount,
                        CloseAVGAmount};
                rowINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow);
                return rowINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICEDataTable cln = ((INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnProductID = base.Columns["ProductID"];
                this.columnProductName = base.Columns["ProductName"];
                this.columnUnit_Name = base.Columns["Unit_Name"];
                this.columnStockID = base.Columns["StockID"];
                this.columnStock_Name = base.Columns["Stock_Name"];
                this.columnProductGroupID = base.Columns["ProductGroupID"];
                this.columnProductGroup_Name = base.Columns["ProductGroup_Name"];
                this.columnOpenQuantity = base.Columns["OpenQuantity"];
                this.columnOpenAmount = base.Columns["OpenAmount"];
                this.columnOpenAVGAmount = base.Columns["OpenAVGAmount"];
                this.columnInQuantity = base.Columns["InQuantity"];
                this.columnInAmount = base.Columns["InAmount"];
                this.columnInAVGAmount = base.Columns["InAVGAmount"];
                this.columnOutQuantity = base.Columns["OutQuantity"];
                this.columnOutAmount = base.Columns["OutAmount"];
                this.columnOutAVGAmount = base.Columns["OutAVGAmount"];
                this.columnOnhandQuantity = base.Columns["OnhandQuantity"];
                this.columnCloseAmount = base.Columns["CloseAmount"];
                this.columnCloseAVGAmount = base.Columns["CloseAVGAmount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnProductID = new global::System.Data.DataColumn("ProductID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductID);
                this.columnProductName = new global::System.Data.DataColumn("ProductName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductName);
                this.columnUnit_Name = new global::System.Data.DataColumn("Unit_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit_Name);
                this.columnStockID = new global::System.Data.DataColumn("StockID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockID);
                this.columnStock_Name = new global::System.Data.DataColumn("Stock_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStock_Name);
                this.columnProductGroupID = new global::System.Data.DataColumn("ProductGroupID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductGroupID);
                this.columnProductGroup_Name = new global::System.Data.DataColumn("ProductGroup_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductGroup_Name);
                this.columnOpenQuantity = new global::System.Data.DataColumn("OpenQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpenQuantity);
                this.columnOpenAmount = new global::System.Data.DataColumn("OpenAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpenAmount);
                this.columnOpenAVGAmount = new global::System.Data.DataColumn("OpenAVGAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpenAVGAmount);
                this.columnInQuantity = new global::System.Data.DataColumn("InQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInQuantity);
                this.columnInAmount = new global::System.Data.DataColumn("InAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInAmount);
                this.columnInAVGAmount = new global::System.Data.DataColumn("InAVGAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInAVGAmount);
                this.columnOutQuantity = new global::System.Data.DataColumn("OutQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutQuantity);
                this.columnOutAmount = new global::System.Data.DataColumn("OutAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutAmount);
                this.columnOutAVGAmount = new global::System.Data.DataColumn("OutAVGAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutAVGAmount);
                this.columnOnhandQuantity = new global::System.Data.DataColumn("OnhandQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOnhandQuantity);
                this.columnCloseAmount = new global::System.Data.DataColumn("CloseAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCloseAmount);
                this.columnCloseAVGAmount = new global::System.Data.DataColumn("CloseAVGAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCloseAVGAmount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow NewINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow() {
                return ((INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowChanged != null)) {
                    this.INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowChanged(this, new INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowChangeEvent(((INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowChanging != null)) {
                    this.INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowChanging(this, new INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowChangeEvent(((INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowDeleted != null)) {
                    this.INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowDeleted(this, new INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowChangeEvent(((INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowDeleting != null)) {
                    this.INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowDeleting(this, new INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowChangeEvent(((INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow(INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSummary ds = new dsSummary();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class INVENTORY_DETAIL_SUMMARYRow : global::System.Data.DataRow {
            
            private INVENTORY_DETAIL_SUMMARYDataTable tableINVENTORY_DETAIL_SUMMARY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal INVENTORY_DETAIL_SUMMARYRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableINVENTORY_DETAIL_SUMMARY = ((INVENTORY_DETAIL_SUMMARYDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProductID {
                get {
                    try {
                        return ((string)(this[this.tableINVENTORY_DETAIL_SUMMARY.ProductIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProductID\' in table \'INVENTORY_DETAIL_SUMMARY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY.ProductIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProductName {
                get {
                    try {
                        return ((string)(this[this.tableINVENTORY_DETAIL_SUMMARY.ProductNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProductName\' in table \'INVENTORY_DETAIL_SUMMARY\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY.ProductNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Unit_Name {
                get {
                    try {
                        return ((string)(this[this.tableINVENTORY_DETAIL_SUMMARY.Unit_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit_Name\' in table \'INVENTORY_DETAIL_SUMMARY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY.Unit_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string StockID {
                get {
                    try {
                        return ((string)(this[this.tableINVENTORY_DETAIL_SUMMARY.StockIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StockID\' in table \'INVENTORY_DETAIL_SUMMARY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY.StockIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Stock_Name {
                get {
                    try {
                        return ((string)(this[this.tableINVENTORY_DETAIL_SUMMARY.Stock_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Stock_Name\' in table \'INVENTORY_DETAIL_SUMMARY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY.Stock_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProductGroupID {
                get {
                    try {
                        return ((string)(this[this.tableINVENTORY_DETAIL_SUMMARY.ProductGroupIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProductGroupID\' in table \'INVENTORY_DETAIL_SUMMARY\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY.ProductGroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProductGroup_Name {
                get {
                    try {
                        return ((string)(this[this.tableINVENTORY_DETAIL_SUMMARY.ProductGroup_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProductGroup_Name\' in table \'INVENTORY_DETAIL_SUMMARY\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY.ProductGroup_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal OpenQuantity {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY.OpenQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OpenQuantity\' in table \'INVENTORY_DETAIL_SUMMARY\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY.OpenQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal OpenAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY.OpenAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OpenAmount\' in table \'INVENTORY_DETAIL_SUMMARY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY.OpenAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal InQuantity {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY.InQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InQuantity\' in table \'INVENTORY_DETAIL_SUMMARY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY.InQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal InAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY.InAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InAmount\' in table \'INVENTORY_DETAIL_SUMMARY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY.InAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal OutQuantity {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY.OutQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutQuantity\' in table \'INVENTORY_DETAIL_SUMMARY\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY.OutQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal OutAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY.OutAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutAmount\' in table \'INVENTORY_DETAIL_SUMMARY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY.OutAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal TotalIOQuantity {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY.TotalIOQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalIOQuantity\' in table \'INVENTORY_DETAIL_SUMMARY\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY.TotalIOQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal TotalIOAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY.TotalIOAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalIOAmount\' in table \'INVENTORY_DETAIL_SUMMARY\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY.TotalIOAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal ProfitAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY.ProfitAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProfitAmount\' in table \'INVENTORY_DETAIL_SUMMARY\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY.ProfitAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProductIDNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY.ProductIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProductIDNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY.ProductIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProductNameNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY.ProductNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProductNameNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY.ProductNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsUnit_NameNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY.Unit_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetUnit_NameNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY.Unit_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsStockIDNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY.StockIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetStockIDNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY.StockIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsStock_NameNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY.Stock_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetStock_NameNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY.Stock_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProductGroupIDNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY.ProductGroupIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProductGroupIDNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY.ProductGroupIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProductGroup_NameNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY.ProductGroup_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProductGroup_NameNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY.ProductGroup_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOpenQuantityNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY.OpenQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOpenQuantityNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY.OpenQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOpenAmountNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY.OpenAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOpenAmountNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY.OpenAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsInQuantityNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY.InQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetInQuantityNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY.InQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsInAmountNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY.InAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetInAmountNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY.InAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOutQuantityNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY.OutQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOutQuantityNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY.OutQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOutAmountNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY.OutAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOutAmountNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY.OutAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTotalIOQuantityNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY.TotalIOQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTotalIOQuantityNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY.TotalIOQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTotalIOAmountNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY.TotalIOAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTotalIOAmountNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY.TotalIOAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProfitAmountNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY.ProfitAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProfitAmountNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY.ProfitAmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow : global::System.Data.DataRow {
            
            private INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICEDataTable tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE = ((INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProductID {
                get {
                    try {
                        return ((string)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.ProductIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProductID\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT" +
                                "_PRICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.ProductIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProductName {
                get {
                    try {
                        return ((string)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.ProductNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProductName\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_AVG_UN" +
                                "IT_PRICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.ProductNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Unit_Name {
                get {
                    try {
                        return ((string)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.Unit_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit_Name\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT" +
                                "_PRICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.Unit_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string StockID {
                get {
                    try {
                        return ((string)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.StockIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StockID\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_P" +
                                "RICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.StockIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Stock_Name {
                get {
                    try {
                        return ((string)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.Stock_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Stock_Name\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNI" +
                                "T_PRICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.Stock_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProductGroupID {
                get {
                    try {
                        return ((string)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.ProductGroupIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProductGroupID\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_AVG" +
                                "_UNIT_PRICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.ProductGroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProductGroup_Name {
                get {
                    try {
                        return ((string)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.ProductGroup_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProductGroup_Name\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_" +
                                "AVG_UNIT_PRICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.ProductGroup_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal OpenQuantity {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OpenQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OpenQuantity\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_AVG_U" +
                                "NIT_PRICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OpenQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal OpenAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OpenAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OpenAmount\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNI" +
                                "T_PRICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OpenAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal OpenAVGAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OpenAVGAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OpenAVGAmount\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_AVG_" +
                                "UNIT_PRICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OpenAVGAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal InQuantity {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.InQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InQuantity\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNI" +
                                "T_PRICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.InQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal InAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.InAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InAmount\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_" +
                                "PRICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.InAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal InAVGAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.InAVGAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InAVGAmount\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_AVG_UN" +
                                "IT_PRICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.InAVGAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal OutQuantity {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OutQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutQuantity\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_AVG_UN" +
                                "IT_PRICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OutQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal OutAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OutAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutAmount\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT" +
                                "_PRICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OutAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal OutAVGAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OutAVGAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutAVGAmount\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_AVG_U" +
                                "NIT_PRICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OutAVGAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal OnhandQuantity {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OnhandQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OnhandQuantity\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_AVG" +
                                "_UNIT_PRICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OnhandQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal CloseAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.CloseAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CloseAmount\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_AVG_UN" +
                                "IT_PRICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.CloseAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal CloseAVGAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.CloseAVGAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CloseAVGAmount\' in table \'INVENTORY_DETAIL_SUMMARY_WITH_AVG" +
                                "_UNIT_PRICE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.CloseAVGAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProductIDNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.ProductIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProductIDNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.ProductIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProductNameNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.ProductNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProductNameNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.ProductNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsUnit_NameNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.Unit_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetUnit_NameNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.Unit_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsStockIDNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.StockIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetStockIDNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.StockIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsStock_NameNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.Stock_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetStock_NameNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.Stock_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProductGroupIDNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.ProductGroupIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProductGroupIDNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.ProductGroupIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProductGroup_NameNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.ProductGroup_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProductGroup_NameNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.ProductGroup_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOpenQuantityNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OpenQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOpenQuantityNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OpenQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOpenAmountNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OpenAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOpenAmountNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OpenAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOpenAVGAmountNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OpenAVGAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOpenAVGAmountNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OpenAVGAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsInQuantityNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.InQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetInQuantityNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.InQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsInAmountNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.InAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetInAmountNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.InAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsInAVGAmountNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.InAVGAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetInAVGAmountNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.InAVGAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOutQuantityNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OutQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOutQuantityNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OutQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOutAmountNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OutAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOutAmountNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OutAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOutAVGAmountNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OutAVGAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOutAVGAmountNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OutAVGAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOnhandQuantityNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OnhandQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOnhandQuantityNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.OnhandQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCloseAmountNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.CloseAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCloseAmountNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.CloseAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCloseAVGAmountNull() {
                return this.IsNull(this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.CloseAVGAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCloseAVGAmountNull() {
                this[this.tableINVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICE.CloseAVGAmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class INVENTORY_DETAIL_SUMMARYRowChangeEvent : global::System.EventArgs {
            
            private INVENTORY_DETAIL_SUMMARYRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public INVENTORY_DETAIL_SUMMARYRowChangeEvent(INVENTORY_DETAIL_SUMMARYRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public INVENTORY_DETAIL_SUMMARYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowChangeEvent : global::System.EventArgs {
            
            private INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERowChangeEvent(INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public INVENTORY_DETAIL_SUMMARY_WITH_AVG_UNIT_PRICERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Perfect.Inventory.Core.Inventory.Inventory.Summary.DS.dsSummaryTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class INVENTORY_DETAIL_SUMMARYTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public INVENTORY_DETAIL_SUMMARYTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "INVENTORY_DETAIL_SUMMARY";
            tableMapping.ColumnMappings.Add("ProductID", "ProductID");
            tableMapping.ColumnMappings.Add("ProductName", "ProductName");
            tableMapping.ColumnMappings.Add("Unit_Name", "Unit_Name");
            tableMapping.ColumnMappings.Add("StockID", "StockID");
            tableMapping.ColumnMappings.Add("Stock_Name", "Stock_Name");
            tableMapping.ColumnMappings.Add("ProductGroupID", "ProductGroupID");
            tableMapping.ColumnMappings.Add("ProductGroup_Name", "ProductGroup_Name");
            tableMapping.ColumnMappings.Add("OpenQuantity", "OpenQuantity");
            tableMapping.ColumnMappings.Add("OpenAmount", "OpenAmount");
            tableMapping.ColumnMappings.Add("InQuantity", "InQuantity");
            tableMapping.ColumnMappings.Add("InAmount", "InAmount");
            tableMapping.ColumnMappings.Add("OutQuantity", "OutQuantity");
            tableMapping.ColumnMappings.Add("OutAmount", "OutAmount");
            tableMapping.ColumnMappings.Add("TotalIOQuantity", "TotalIOQuantity");
            tableMapping.ColumnMappings.Add("TotalIOAmount", "TotalIOAmount");
            tableMapping.ColumnMappings.Add("ProfitAmount", "ProfitAmount");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Perfect.Inventory.Core.Properties.Settings.Default.hongdanhblConnectionString1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EP.Product_ID AS ProductID,\r\n       p.Product_Name AS ProductName,\r\n      " +
                " u.Unit_Name,\r\n       EP.Stock_ID AS StockID,\r\n       s.Stock_Name,\r\n       p.Pr" +
                "oduct_Group_ID AS ProductGroupID,\r\n       pg.ProductGroup_Name,\r\n       EP.OpenQ" +
                "uantity,\r\n       EP.OpenAmount,\r\n       EP.InQuantity,\r\n       EP.InAmount,\r\n   " +
                "    EP.OutQuantity,\r\n       EP.OutQuantity * ROUND(\r\n           (\r\n             " +
                "  CASE \r\n                    WHEN EP.TotalOpIQuantity = 0 THEN 0\r\n              " +
                "      ELSE (EP.TotalOpIAmount / EP.TotalOpIQuantity)\r\n               END\r\n      " +
                "     ),\r\n           2\r\n       ) AS [OutAmount],\r\n       --EP.OutAmount,\r\n       " +
                "EP.TotalIOQuantity,\r\n       ROUND(\r\n           EP.TotalIOQuantity * (\r\n         " +
                "      CASE \r\n                    WHEN EP.TotalOpIQuantity = 0 THEN 0\r\n          " +
                "          ELSE (EP.TotalOpIAmount / EP.TotalOpIQuantity)\r\n               END\r\n  " +
                "         ),\r\n           2\r\n       ) AS TotalIOAmount,\r\n       EP.OutAmount - ROU" +
                "ND(\r\n           EP.OutQuantity * (\r\n               CASE \r\n                    WH" +
                "EN EP.TotalOpIQuantity = 0 THEN 0\r\n                    ELSE (EP.TotalOpIAmount /" +
                " EP.TotalOpIQuantity)\r\n               END\r\n           ),\r\n           2\r\n       )" +
                " AS ProfitAmount\r\nFROM   (\r\n           SELECT EE.Product_ID,\r\n                  " +
                "EE.Stock_ID,\r\n                  EE.OpenQuantity,\r\n                  EE.OpenAmoun" +
                "t,\r\n                  EE.TotalQuantityInward AS InQuantity,\r\n                  E" +
                "E.TotalAmountInward AS InAmount,\r\n                  EE.TotalQuantityOutward AS O" +
                "utQuantity,\r\n                  EE.TotalAmountOutward AS OutAmount,\r\n            " +
                "      (EE.OpenQuantity + EE.TotalQuantityInward) AS TotalOpIQuantity,\r\n         " +
                "         (EE.OpenAmount + EE.TotalAmountInward) AS TotalOpIAmount,\r\n            " +
                "      (\r\n                      EE.OpenQuantity + EE.TotalQuantityInward - EE.Tot" +
                "alQuantityOutward\r\n                  ) AS TotalIOQuantity\r\n           FROM   (\r\n" +
                "                      SELECT CASE \r\n                                  WHEN IP.Pr" +
                "oduct_ID IS NULL THEN FP.Product_ID\r\n                                  ELSE IP.P" +
                "roduct_ID\r\n                             END AS Product_ID,\r\n                    " +
                "         CASE \r\n                                  WHEN IP.Stock_ID IS NULL THEN " +
                "FP.Stock_ID\r\n                                  ELSE IP.Stock_ID\r\n               " +
                "              END AS Stock_ID,\r\n                             CASE \r\n            " +
                "                      WHEN FP.OpenQuantity IS NULL THEN 0\r\n                     " +
                "             ELSE FP.OpenQuantity\r\n                             END AS OpenQuant" +
                "ity,\r\n                             CASE \r\n                                  WHEN" +
                " FP.OpenAmount IS NULL THEN 0\r\n                                  ELSE FP.OpenAmo" +
                "unt\r\n                             END AS OpenAmount,\r\n                          " +
                "   CASE \r\n                                  WHEN IP.TotalQuantityInward IS NULL " +
                "THEN 0\r\n                                  ELSE IP.TotalQuantityInward\r\n         " +
                "                    END AS TotalQuantityInward,\r\n                             CA" +
                "SE \r\n                                  WHEN IP.TotalAmountInward IS NULL THEN 0\r" +
                "\n                                  ELSE IP.TotalAmountInward\r\n                  " +
                "           END AS TotalAmountInward,\r\n                             CASE \r\n      " +
                "                            WHEN IP.TotalQuantityOutward IS NULL THEN 0\r\n       " +
                "                           ELSE IP.TotalQuantityOutward\r\n                       " +
                "      END AS TotalQuantityOutward,\r\n                             CASE \r\n        " +
                "                          WHEN IP.TotalAmountOutward IS NULL THEN 0\r\n           " +
                "                       ELSE IP.TotalAmountOutward\r\n                             " +
                "END AS TotalAmountOutward\r\n                      FROM   (\r\n                     " +
                "            SELECT a.Product_ID,\r\n                                        a.Stoc" +
                "k_ID,\r\n                                        SUM(a.Inward) AS TotalQuantityInw" +
                "ard,\r\n                                        SUM(a.AmountInward) AS TotalAmount" +
                "Inward,\r\n                                        SUM(a.Outward) AS TotalQuantity" +
                "Outward,\r\n                                        SUM(a.AmountOutward) AS \r\n    " +
                "                                    TotalAmountOutward\r\n                        " +
                "         FROM   (\r\n                                            SELECT id.Product" +
                "_ID,\r\n                                                   id.Stock_ID,\r\n         " +
                "                                          id.RefStatus,\r\n                       " +
                "                            CASE id.RefStatus\r\n                                 " +
                "                       WHEN 1 THEN id.Quantity\r\n                                " +
                "                        ELSE 0\r\n                                                " +
                "   END AS Inward,\r\n                                                   CASE id.Re" +
                "fStatus\r\n                                                        WHEN 1 THEN (id" +
                ".Price * id.Quantity)\r\n                                                        E" +
                "LSE 0\r\n                                                   END AS AmountInward,\r\n" +
                "                                                   CASE id.RefStatus\r\n          " +
                "                                              WHEN 2 THEN id.Quantity\r\n         " +
                "                                               ELSE 0\r\n                         " +
                "                          END AS Outward,\r\n                                     " +
                "              CASE id.RefStatus\r\n                                               " +
                "         WHEN 2 THEN (id.Price * id.Quantity)\r\n                                 " +
                "                       ELSE 0\r\n                                                 " +
                "  END AS AmountOutward\r\n                                            FROM   INVEN" +
                "TORY_DETAIL id\r\n                                            WHERE  DATEDIFF(DAY," +
                " @FromDate, id.RefDate) \r\n                                                   >= " +
                "0\r\n                                                   AND DATEDIFF(DAY, @ToDate," +
                " id.RefDate) \r\n                                                       <= 0\r\n    " +
                "                                               AND id.RefType != 0\r\n            " +
                "                                       AND id.Stock_ID = @Stock_Id\r\n            " +
                "                            )a\r\n                                 GROUP BY\r\n     " +
                "                                   a.Product_ID,\r\n                              " +
                "          a.Stock_ID\r\n                             ) IP\r\n                       " +
                "      FULL OUTER JOIN (\r\n                                      SELECT b.Product_" +
                "ID,\r\n                                             b.Stock_ID,\r\n                 " +
                "                            SUM(b.RealQuantity) AS OpenQuantity,\r\n              " +
                "                               SUM(b.RealAmount) AS OpenAmount\r\n                " +
                "                      FROM   (\r\n                                                " +
                " SELECT id1.Product_ID,\r\n                                                       " +
                " id1.Stock_ID,\r\n                                                        id1.RefS" +
                "tatus,\r\n                                                        CASE id1.RefStat" +
                "us\r\n                                                             WHEN 1 THEN id1" +
                ".Quantity\r\n                                                             ELSE (id" +
                "1.Quantity * -1)\r\n                                                        END AS" +
                " RealQuantity,\r\n                                                        CASE id1" +
                ".RefStatus\r\n                                                             WHEN 1 " +
                "THEN (p.Price * id1.Quantity)\r\n                                                 " +
                "            ELSE ((p.Price * id1.Quantity) * -1)\r\n                              " +
                "                          END AS RealAmount\r\n                                   " +
                "              FROM   INVENTORY_DETAIL id1\r\n                                     " +
                "                   LEFT JOIN (\r\n                                                " +
                "                 SELECT AA.Product_ID,\r\n                                        " +
                "                                CASE \r\n                                         " +
                "                                    WHEN \r\n                                     " +
                "                                             SUM(AA.Quantity) \r\n                " +
                "                                                                  IS \r\n         " +
                "                                                                         NULL\r\n " +
                "                                                                OR SUM(AA.Quanti" +
                "ty) \r\n                                                                    = 0 TH" +
                "EN 0\r\n                                                                    ELSE S" +
                "UM(AA.Amount) \r\n                                                                " +
                "    / SUM(AA.Quantity) \r\n                                                       " +
                "             END AS \r\n                                                          " +
                "          Price\r\n                                                               " +
                "     FROM (\r\n                                                                   " +
                "     SELECT \r\n                                                                  " +
                "             id2.Product_ID,\r\n                                                  " +
                "                             id2.Quantity,\r\n                                    " +
                "                                           (id2.Quantity * id2.Price) AS \r\n     " +
                "                                                                          Amount" +
                "\r\n                                                                        FROM  " +
                " \r\n                                                                             " +
                "  INVENTORY_DETAIL \r\n                                                           " +
                "                    id2\r\n                                                       " +
                "                 WHERE  (\r\n                                                     " +
                "                              DATEDIFF(DAY, @FromDate, id2.RefDate) \r\n          " +
                "                                                                         <\r\n    " +
                "                                                                               0" +
                "\r\n                                                                              " +
                "     OR \r\n                                                                      " +
                "                id2.RefType \r\n                                                  " +
                "                                    =\r\n                                         " +
                "                                             0\r\n                                " +
                "                                               )\r\n                              " +
                "                                                 AND \r\n                         " +
                "                                                          id2.RefType \r\n        " +
                "                                                                           <\r\n  " +
                "                                                                                " +
                " >\r\n                                                                            " +
                "       2\r\n                                                                    )A" +
                "A\r\n                                                                    GROUP BY\r" +
                "\n                                                                    AA.Product_" +
                "ID\r\n                                                             ) P\r\n          " +
                "                                                   ON  id1.Product_ID = \r\n      " +
                "                                                           P.Product_ID\r\n       " +
                "                                          WHERE  (\r\n                            " +
                "                                DATEDIFF(DAY, @FromDate, id1.RefDate) \r\n        " +
                "                                                    < 0\r\n                       " +
                "                                     OR id1.RefType =\r\n                         " +
                "                                      0\r\n                                       " +
                "                 )\r\n                                                        AND " +
                "id1.Stock_ID = @Stock_Id\r\n                                             )b\r\n     " +
                "                                 GROUP BY\r\n                                     " +
                "        b.Product_ID,\r\n                                             b.Stock_ID\r\n" +
                "                                  ) FP\r\n                                  ON  IP" +
                ".Product_ID = FP.Product_ID\r\n                  )EE\r\n       ) EP\r\n       LEFT OUT" +
                "ER JOIN PRODUCT p\r\n            ON  EP.Product_ID = p.Product_ID\r\n       LEFT OUT" +
                "ER JOIN STOCK s\r\n            ON  EP.Stock_ID = s.Stock_ID\r\n       LEFT OUTER JOI" +
                "N UNIT u\r\n            ON  u.Unit_ID = p.Unit\r\n       LEFT OUTER JOIN PRODUCT_GRO" +
                "UP pg\r\n            ON  pg.ProductGroup_ID = p.Product_Group_ID  ";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FromDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Stock_Id", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT \r\n\r\nEP.Product_ID AS ProductID,\r\np.Product_Name AS ProductName,\r\nu.Unit_Na" +
                "me,\r\nEP.Stock_ID AS StockID,\r\ns.Stock_Name,\r\np.Product_Group_ID AS ProductGroupI" +
                "D,\r\npg.ProductGroup_Name,\r\n\r\nEP.OpenQuantity,\r\nEP.OpenAmount,\r\n\r\nEP.TotalQuantit" +
                "yInward AS InQuantity,\r\nEP.TotalAmountInward AS InAmount,\r\n\r\nEP.TotalQuantityOut" +
                "ward AS OutQuantity,\r\nEP.TotalAmountOutward AS OutAmount,\r\n\r\n(EP.OpenQuantity + " +
                "EP.TotalQuantityInward - EP.TotalQuantityOutward) AS TotalIOQuantity,\r\n(EP.OpenA" +
                "mount + EP.TotalAmountInward - EP.TotalAmountOutward) AS TotalIOAmount \r\n\r\nFROM\r" +
                "\n(\r\n\tSELECT \r\n\t\tCASE WHEN IP.Product_ID IS NULL THEN FP.Product_ID\r\n\t\tELSE IP.Pr" +
                "oduct_ID END AS Product_ID,\r\n\t\t\r\n\t\tCASE WHEN IP.Stock_ID IS NULL THEN FP.Stock_I" +
                "D\r\n\t\tELSE IP.Stock_ID END AS Stock_ID,\r\n\t\t\r\n\t\tCASE WHEN IP.Unit IS NULL THEN FP." +
                "Unit\r\n\t\tELSE IP.Unit END AS Unit,\r\n\t\t\r\n\t\tCASE WHEN FP.OpenQuantity IS NULL THEN " +
                "0\r\n\t\tELSE FP.OpenQuantity END AS OpenQuantity,\r\n\t\t\r\n\t\tCASE WHEN FP.OpenAmount IS" +
                " NULL THEN 0\r\n\t\tELSE FP.OpenAmount END AS OpenAmount,\r\n\t\t\r\n\t\tCASE WHEN IP.TotalQ" +
                "uantityInward IS NULL THEN 0\r\n\t\tELSE IP.TotalQuantityInward END AS TotalQuantity" +
                "Inward,\r\n\t\t\r\n\t\tCASE WHEN IP.TotalAmountInward IS NULL THEN 0\r\n\t\tELSE IP.TotalAmo" +
                "untInward END AS TotalAmountInward,\r\n\t\t\r\n\t\tCASE WHEN IP.TotalQuantityOutward IS " +
                "NULL THEN 0\r\n\t\tELSE IP.TotalQuantityOutward END AS TotalQuantityOutward,\r\n\t\t\r\n\t\t" +
                "CASE WHEN IP.TotalAmountOutward IS NULL THEN 0\r\n\t\tELSE IP.TotalAmountOutward END" +
                " AS TotalAmountOutward\r\n\t\t\r\n\tFROM \r\n\t(\r\n\t\tSELECT a.Product_ID,a.Stock_ID,a.Unit," +
                "\r\n\t\tSUM(a.Inward) AS TotalQuantityInward, SUM(a.AmountInward) AS TotalAmountInwa" +
                "rd,\r\n\t\tSUM(a.Outward) AS TotalQuantityOutward, SUM(a.AmountOutward) AS TotalAmou" +
                "ntOutward\r\n\t\tFROM(\r\n\t\t\tSELECT id.Product_ID,id.Stock_ID,id.RefStatus,id.Unit,\r\n\t" +
                "\t\tCASE id.RefStatus WHEN 1 THEN id.Quantity \r\n\t\t\tELSE 0 END AS Inward,\r\n\t\t\tCASE " +
                "id.RefStatus WHEN 1 THEN (id.Price * id.Quantity) \r\n\t\t\tELSE 0 END AS AmountInwar" +
                "d,\r\n\t\t\tCASE id.RefStatus WHEN 2 THEN id.Quantity\r\n\t\t\tELSE 0 END AS Outward,\r\n\t\t\t" +
                "CASE id.RefStatus WHEN 2 THEN (id.Price * id.Quantity) \r\n\t\t\tELSE 0 END AS Amount" +
                "Outward\r\n\t\t\tFROM INVENTORY_DETAIL id\r\n\t\t\tWHERE DATEDIFF(DAY,@FromDate,id.RefDate" +
                ") >=0\r\n\t\t\tAND DATEDIFF(DAY,@ToDate,id.RefDate) <=0 AND id.RefType != 0\r\n\t\t\tAND i" +
                "d.Stock_ID = @StockId\r\n\t\t)a\r\n\t\tGROUP BY a.Product_ID,a.Stock_ID,a.Unit\r\n\t) IP FU" +
                "LL OUTER JOIN\r\n\t(\r\n\t\tSELECT b.Product_ID,b.Unit,b.Stock_ID,SUM(b.RealQuantity) A" +
                "S OpenQuantity,SUM(b.RealAmount) AS OpenAmount\r\n\t\tFROM \r\n\t\t(\r\n\t\t\tSELECT id1.Prod" +
                "uct_ID,id1.Stock_ID,id1.RefStatus,id1.Unit,\r\n\t\t\tCASE id1.RefStatus WHEN 1 THEN i" +
                "d1.Quantity \r\n\t\t\tELSE (id1.Quantity * -1) END AS RealQuantity,\r\n\t\t\tCASE id1.RefS" +
                "tatus WHEN 1 THEN (id1.Price * id1.Quantity) \r\n\t\t\tELSE ((id1.Price * id1.Quantit" +
                "y) * -1) END AS RealAmount\r\n\t\t\tFROM INVENTORY_DETAIL id1\r\n\t\t\tWHERE (DATEDIFF(DAY" +
                ",@FromDate,id1.RefDate) <0\r\n\t\t\tOR id1.RefType = 0) AND id1.Stock_ID = @StockId\r\n" +
                "\t\t)b\r\n\t\tGROUP BY b.Product_ID,b.Stock_ID,b.Unit\r\n\t) FP ON IP.Product_ID = FP.Pro" +
                "duct_ID AND IP.Unit = FP.Unit\t\r\n) EP LEFT OUTER JOIN PRODUCT p ON EP.Product_ID " +
                "= p.Product_ID\r\nLEFT OUTER JOIN STOCK s ON  EP.Stock_ID = s.Stock_ID \r\nLEFT OUTE" +
                "R JOIN UNIT u ON EP.Unit = u.Unit_ID\r\nLEFT OUTER JOIN PRODUCT_GROUP pg ON pg.Pro" +
                "ductGroup_ID = p.Product_Group_ID";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FromDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StockId", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsSummary.INVENTORY_DETAIL_SUMMARYDataTable dataTable, System.DateTime FromDate, System.DateTime ToDate, string Stock_Id) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(FromDate));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(ToDate));
            if ((Stock_Id == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(Stock_Id));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsSummary.INVENTORY_DETAIL_SUMMARYDataTable GetData(System.DateTime FromDate, System.DateTime ToDate, string Stock_Id) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(FromDate));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(ToDate));
            if ((Stock_Id == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(Stock_Id));
            }
            dsSummary.INVENTORY_DETAIL_SUMMARYDataTable dataTable = new dsSummary.INVENTORY_DETAIL_SUMMARYDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(dsSummary.INVENTORY_DETAIL_SUMMARYDataTable dataTable, System.DateTime FromDate, System.DateTime ToDate, string StockId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(FromDate));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(ToDate));
            if ((StockId == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(StockId));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual dsSummary.INVENTORY_DETAIL_SUMMARYDataTable GetDataBy(System.DateTime FromDate, System.DateTime ToDate, string StockId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(FromDate));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(ToDate));
            if ((StockId == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(StockId));
            }
            dsSummary.INVENTORY_DETAIL_SUMMARYDataTable dataTable = new dsSummary.INVENTORY_DETAIL_SUMMARYDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateUpdatedRows(dsSummary dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateInsertedRows(dsSummary dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateDeletedRows(dsSummary dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public virtual int UpdateAll(dsSummary dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591