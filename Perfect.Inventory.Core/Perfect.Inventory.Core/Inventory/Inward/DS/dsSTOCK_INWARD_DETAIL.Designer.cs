//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Perfect.Inventory.Core.Inventory.Inward {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsSTOCK_INWARD_DETAIL")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsSTOCK_INWARD_DETAIL : global::System.Data.DataSet {
        
        private STOCK_INWARD_DETAILDataTable tableSTOCK_INWARD_DETAIL;
        
        private STOCK_INWARD_ByDateDataTable tableSTOCK_INWARD_ByDate;
        
        private STOCK_INWARDDataTable tableSTOCK_INWARD;
        
        private STOCK_INWARD_DETAIL_ByDateDataTable tableSTOCK_INWARD_DETAIL_ByDate;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsSTOCK_INWARD_DETAIL() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsSTOCK_INWARD_DETAIL(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["STOCK_INWARD_DETAIL"] != null)) {
                    base.Tables.Add(new STOCK_INWARD_DETAILDataTable(ds.Tables["STOCK_INWARD_DETAIL"]));
                }
                if ((ds.Tables["STOCK_INWARD_ByDate"] != null)) {
                    base.Tables.Add(new STOCK_INWARD_ByDateDataTable(ds.Tables["STOCK_INWARD_ByDate"]));
                }
                if ((ds.Tables["STOCK_INWARD"] != null)) {
                    base.Tables.Add(new STOCK_INWARDDataTable(ds.Tables["STOCK_INWARD"]));
                }
                if ((ds.Tables["STOCK_INWARD_DETAIL_ByDate"] != null)) {
                    base.Tables.Add(new STOCK_INWARD_DETAIL_ByDateDataTable(ds.Tables["STOCK_INWARD_DETAIL_ByDate"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STOCK_INWARD_DETAILDataTable STOCK_INWARD_DETAIL {
            get {
                return this.tableSTOCK_INWARD_DETAIL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STOCK_INWARD_ByDateDataTable STOCK_INWARD_ByDate {
            get {
                return this.tableSTOCK_INWARD_ByDate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STOCK_INWARDDataTable STOCK_INWARD {
            get {
                return this.tableSTOCK_INWARD;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STOCK_INWARD_DETAIL_ByDateDataTable STOCK_INWARD_DETAIL_ByDate {
            get {
                return this.tableSTOCK_INWARD_DETAIL_ByDate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsSTOCK_INWARD_DETAIL cln = ((dsSTOCK_INWARD_DETAIL)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["STOCK_INWARD_DETAIL"] != null)) {
                    base.Tables.Add(new STOCK_INWARD_DETAILDataTable(ds.Tables["STOCK_INWARD_DETAIL"]));
                }
                if ((ds.Tables["STOCK_INWARD_ByDate"] != null)) {
                    base.Tables.Add(new STOCK_INWARD_ByDateDataTable(ds.Tables["STOCK_INWARD_ByDate"]));
                }
                if ((ds.Tables["STOCK_INWARD"] != null)) {
                    base.Tables.Add(new STOCK_INWARDDataTable(ds.Tables["STOCK_INWARD"]));
                }
                if ((ds.Tables["STOCK_INWARD_DETAIL_ByDate"] != null)) {
                    base.Tables.Add(new STOCK_INWARD_DETAIL_ByDateDataTable(ds.Tables["STOCK_INWARD_DETAIL_ByDate"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSTOCK_INWARD_DETAIL = ((STOCK_INWARD_DETAILDataTable)(base.Tables["STOCK_INWARD_DETAIL"]));
            if ((initTable == true)) {
                if ((this.tableSTOCK_INWARD_DETAIL != null)) {
                    this.tableSTOCK_INWARD_DETAIL.InitVars();
                }
            }
            this.tableSTOCK_INWARD_ByDate = ((STOCK_INWARD_ByDateDataTable)(base.Tables["STOCK_INWARD_ByDate"]));
            if ((initTable == true)) {
                if ((this.tableSTOCK_INWARD_ByDate != null)) {
                    this.tableSTOCK_INWARD_ByDate.InitVars();
                }
            }
            this.tableSTOCK_INWARD = ((STOCK_INWARDDataTable)(base.Tables["STOCK_INWARD"]));
            if ((initTable == true)) {
                if ((this.tableSTOCK_INWARD != null)) {
                    this.tableSTOCK_INWARD.InitVars();
                }
            }
            this.tableSTOCK_INWARD_DETAIL_ByDate = ((STOCK_INWARD_DETAIL_ByDateDataTable)(base.Tables["STOCK_INWARD_DETAIL_ByDate"]));
            if ((initTable == true)) {
                if ((this.tableSTOCK_INWARD_DETAIL_ByDate != null)) {
                    this.tableSTOCK_INWARD_DETAIL_ByDate.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsSTOCK_INWARD_DETAIL";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsSTOCK_INWARD_DETAIL.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSTOCK_INWARD_DETAIL = new STOCK_INWARD_DETAILDataTable();
            base.Tables.Add(this.tableSTOCK_INWARD_DETAIL);
            this.tableSTOCK_INWARD_ByDate = new STOCK_INWARD_ByDateDataTable();
            base.Tables.Add(this.tableSTOCK_INWARD_ByDate);
            this.tableSTOCK_INWARD = new STOCK_INWARDDataTable();
            base.Tables.Add(this.tableSTOCK_INWARD);
            this.tableSTOCK_INWARD_DETAIL_ByDate = new STOCK_INWARD_DETAIL_ByDateDataTable();
            base.Tables.Add(this.tableSTOCK_INWARD_DETAIL_ByDate);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTOCK_INWARD_DETAIL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTOCK_INWARD_ByDate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTOCK_INWARD() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTOCK_INWARD_DETAIL_ByDate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsSTOCK_INWARD_DETAIL ds = new dsSTOCK_INWARD_DETAIL();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void STOCK_INWARD_DETAILRowChangeEventHandler(object sender, STOCK_INWARD_DETAILRowChangeEvent e);
        
        public delegate void STOCK_INWARD_ByDateRowChangeEventHandler(object sender, STOCK_INWARD_ByDateRowChangeEvent e);
        
        public delegate void STOCK_INWARDRowChangeEventHandler(object sender, STOCK_INWARDRowChangeEvent e);
        
        public delegate void STOCK_INWARD_DETAIL_ByDateRowChangeEventHandler(object sender, STOCK_INWARD_DETAIL_ByDateRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STOCK_INWARD_DETAILDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnError;
            
            private global::System.Data.DataColumn columnErrorText;
            
            private global::System.Data.DataColumn columnInward_ID;
            
            private global::System.Data.DataColumn columnProduct_ID;
            
            private global::System.Data.DataColumn columnItemID;
            
            private global::System.Data.DataColumn columnStock_ID;
            
            private global::System.Data.DataColumn columnLimit;
            
            private global::System.Data.DataColumn columnVat;
            
            private global::System.Data.DataColumn columnWidth;
            
            private global::System.Data.DataColumn columnHeight;
            
            private global::System.Data.DataColumn columnOrgin;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnCurrentQty;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnUnitPrice;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnBatch;
            
            private global::System.Data.DataColumn columnSerial;
            
            private global::System.Data.DataColumn columnUnit;
            
            private global::System.Data.DataColumn columnUnitConvert;
            
            private global::System.Data.DataColumn columnDiscount;
            
            private global::System.Data.DataColumn columnCharge;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnSorted;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnStoreID;
            
            private global::System.Data.DataColumn columnQtyConvert;
            
            private global::System.Data.DataColumn columnRefType;
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnProduct_Type_ID;
            
            private global::System.Data.DataColumn columnProduct_Name;
            
            private global::System.Data.DataColumn columnUnit_Name;
            
            private global::System.Data.DataColumn columnX;
            
            private global::System.Data.DataColumn columnY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARD_DETAILDataTable() {
                this.TableName = "STOCK_INWARD_DETAIL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STOCK_INWARD_DETAILDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STOCK_INWARD_DETAILDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorColumn {
                get {
                    return this.columnError;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorTextColumn {
                get {
                    return this.columnErrorText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Inward_IDColumn {
                get {
                    return this.columnInward_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_IDColumn {
                get {
                    return this.columnProduct_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemIDColumn {
                get {
                    return this.columnItemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Stock_IDColumn {
                get {
                    return this.columnStock_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LimitColumn {
                get {
                    return this.columnLimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VatColumn {
                get {
                    return this.columnVat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WidthColumn {
                get {
                    return this.columnWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrginColumn {
                get {
                    return this.columnOrgin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentQtyColumn {
                get {
                    return this.columnCurrentQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitPriceColumn {
                get {
                    return this.columnUnitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BatchColumn {
                get {
                    return this.columnBatch;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SerialColumn {
                get {
                    return this.columnSerial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitConvertColumn {
                get {
                    return this.columnUnitConvert;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiscountColumn {
                get {
                    return this.columnDiscount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChargeColumn {
                get {
                    return this.columnCharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortedColumn {
                get {
                    return this.columnSorted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoreIDColumn {
                get {
                    return this.columnStoreID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QtyConvertColumn {
                get {
                    return this.columnQtyConvert;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefTypeColumn {
                get {
                    return this.columnRefType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_Type_IDColumn {
                get {
                    return this.columnProduct_Type_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_NameColumn {
                get {
                    return this.columnProduct_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Unit_NameColumn {
                get {
                    return this.columnUnit_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YColumn {
                get {
                    return this.columnY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARD_DETAILRow this[int index] {
                get {
                    return ((STOCK_INWARD_DETAILRow)(this.Rows[index]));
                }
            }
            
            public event STOCK_INWARD_DETAILRowChangeEventHandler STOCK_INWARD_DETAILRowChanging;
            
            public event STOCK_INWARD_DETAILRowChangeEventHandler STOCK_INWARD_DETAILRowChanged;
            
            public event STOCK_INWARD_DETAILRowChangeEventHandler STOCK_INWARD_DETAILRowDeleting;
            
            public event STOCK_INWARD_DETAILRowChangeEventHandler STOCK_INWARD_DETAILRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTOCK_INWARD_DETAILRow(STOCK_INWARD_DETAILRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARD_DETAILRow AddSTOCK_INWARD_DETAILRow(
                        int Error, 
                        string ErrorText, 
                        string Inward_ID, 
                        string Product_ID, 
                        string ItemID, 
                        string Stock_ID, 
                        System.DateTime Limit, 
                        int Vat, 
                        decimal Width, 
                        decimal Height, 
                        string Orgin, 
                        string Size, 
                        decimal CurrentQty, 
                        decimal Quantity, 
                        decimal UnitPrice, 
                        decimal Amount, 
                        string Batch, 
                        string Serial, 
                        string Unit, 
                        decimal UnitConvert, 
                        decimal Discount, 
                        decimal Charge, 
                        string Description, 
                        long Sorted, 
                        bool Active, 
                        long StoreID, 
                        decimal QtyConvert, 
                        int RefType, 
                        System.Guid ID, 
                        int Product_Type_ID, 
                        string Product_Name, 
                        string Unit_Name, 
                        int X, 
                        int Y) {
                STOCK_INWARD_DETAILRow rowSTOCK_INWARD_DETAILRow = ((STOCK_INWARD_DETAILRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Error,
                        ErrorText,
                        Inward_ID,
                        Product_ID,
                        ItemID,
                        Stock_ID,
                        Limit,
                        Vat,
                        Width,
                        Height,
                        Orgin,
                        Size,
                        CurrentQty,
                        Quantity,
                        UnitPrice,
                        Amount,
                        Batch,
                        Serial,
                        Unit,
                        UnitConvert,
                        Discount,
                        Charge,
                        Description,
                        Sorted,
                        Active,
                        StoreID,
                        QtyConvert,
                        RefType,
                        ID,
                        Product_Type_ID,
                        Product_Name,
                        Unit_Name,
                        X,
                        Y};
                rowSTOCK_INWARD_DETAILRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSTOCK_INWARD_DETAILRow);
                return rowSTOCK_INWARD_DETAILRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                STOCK_INWARD_DETAILDataTable cln = ((STOCK_INWARD_DETAILDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new STOCK_INWARD_DETAILDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnError = base.Columns["Error"];
                this.columnErrorText = base.Columns["ErrorText"];
                this.columnInward_ID = base.Columns["Inward_ID"];
                this.columnProduct_ID = base.Columns["Product_ID"];
                this.columnItemID = base.Columns["ItemID"];
                this.columnStock_ID = base.Columns["Stock_ID"];
                this.columnLimit = base.Columns["Limit"];
                this.columnVat = base.Columns["Vat"];
                this.columnWidth = base.Columns["Width"];
                this.columnHeight = base.Columns["Height"];
                this.columnOrgin = base.Columns["Orgin"];
                this.columnSize = base.Columns["Size"];
                this.columnCurrentQty = base.Columns["CurrentQty"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnUnitPrice = base.Columns["UnitPrice"];
                this.columnAmount = base.Columns["Amount"];
                this.columnBatch = base.Columns["Batch"];
                this.columnSerial = base.Columns["Serial"];
                this.columnUnit = base.Columns["Unit"];
                this.columnUnitConvert = base.Columns["UnitConvert"];
                this.columnDiscount = base.Columns["Discount"];
                this.columnCharge = base.Columns["Charge"];
                this.columnDescription = base.Columns["Description"];
                this.columnSorted = base.Columns["Sorted"];
                this.columnActive = base.Columns["Active"];
                this.columnStoreID = base.Columns["StoreID"];
                this.columnQtyConvert = base.Columns["QtyConvert"];
                this.columnRefType = base.Columns["RefType"];
                this.columnID = base.Columns["ID"];
                this.columnProduct_Type_ID = base.Columns["Product_Type_ID"];
                this.columnProduct_Name = base.Columns["Product_Name"];
                this.columnUnit_Name = base.Columns["Unit_Name"];
                this.columnX = base.Columns["X"];
                this.columnY = base.Columns["Y"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnError = new global::System.Data.DataColumn("Error", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnError);
                this.columnErrorText = new global::System.Data.DataColumn("ErrorText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorText);
                this.columnInward_ID = new global::System.Data.DataColumn("Inward_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInward_ID);
                this.columnProduct_ID = new global::System.Data.DataColumn("Product_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_ID);
                this.columnItemID = new global::System.Data.DataColumn("ItemID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemID);
                this.columnStock_ID = new global::System.Data.DataColumn("Stock_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStock_ID);
                this.columnLimit = new global::System.Data.DataColumn("Limit", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLimit);
                this.columnVat = new global::System.Data.DataColumn("Vat", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVat);
                this.columnWidth = new global::System.Data.DataColumn("Width", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWidth);
                this.columnHeight = new global::System.Data.DataColumn("Height", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeight);
                this.columnOrgin = new global::System.Data.DataColumn("Orgin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrgin);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnCurrentQty = new global::System.Data.DataColumn("CurrentQty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentQty);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnUnitPrice = new global::System.Data.DataColumn("UnitPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitPrice);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnBatch = new global::System.Data.DataColumn("Batch", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatch);
                this.columnSerial = new global::System.Data.DataColumn("Serial", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSerial);
                this.columnUnit = new global::System.Data.DataColumn("Unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit);
                this.columnUnitConvert = new global::System.Data.DataColumn("UnitConvert", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitConvert);
                this.columnDiscount = new global::System.Data.DataColumn("Discount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscount);
                this.columnCharge = new global::System.Data.DataColumn("Charge", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCharge);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnSorted = new global::System.Data.DataColumn("Sorted", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSorted);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnStoreID = new global::System.Data.DataColumn("StoreID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStoreID);
                this.columnQtyConvert = new global::System.Data.DataColumn("QtyConvert", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQtyConvert);
                this.columnRefType = new global::System.Data.DataColumn("RefType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefType);
                this.columnID = new global::System.Data.DataColumn("ID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnProduct_Type_ID = new global::System.Data.DataColumn("Product_Type_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_Type_ID);
                this.columnProduct_Name = new global::System.Data.DataColumn("Product_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_Name);
                this.columnUnit_Name = new global::System.Data.DataColumn("Unit_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit_Name);
                this.columnX = new global::System.Data.DataColumn("X", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnX);
                this.columnY = new global::System.Data.DataColumn("Y", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnY);
                this.columnError.DefaultValue = ((int)(0));
                this.columnErrorText.DefaultValue = ((string)(""));
                this.columnErrorText.MaxLength = 255;
                this.columnInward_ID.DefaultValue = ((string)("0"));
                this.columnInward_ID.MaxLength = 20;
                this.columnProduct_ID.DefaultValue = ((string)("0"));
                this.columnProduct_ID.MaxLength = 20;
                this.columnItemID.DefaultValue = ((string)("0"));
                this.columnItemID.MaxLength = 20;
                this.columnStock_ID.DefaultValue = ((string)("0"));
                this.columnStock_ID.MaxLength = 20;
                this.columnVat.DefaultValue = ((int)(0));
                this.columnWidth.DefaultValue = ((decimal)(0m));
                this.columnHeight.DefaultValue = ((decimal)(0m));
                this.columnOrgin.DefaultValue = ((string)(""));
                this.columnOrgin.MaxLength = 255;
                this.columnSize.DefaultValue = ((string)(""));
                this.columnSize.MaxLength = 255;
                this.columnCurrentQty.DefaultValue = ((decimal)(0m));
                this.columnQuantity.DefaultValue = ((decimal)(0m));
                this.columnUnitPrice.DefaultValue = ((decimal)(0m));
                this.columnAmount.DefaultValue = ((decimal)(0m));
                this.columnBatch.DefaultValue = ((string)(""));
                this.columnBatch.MaxLength = 50;
                this.columnSerial.DefaultValue = ((string)(""));
                this.columnSerial.MaxLength = 50;
                this.columnUnit.DefaultValue = ((string)(""));
                this.columnUnit.MaxLength = 20;
                this.columnUnitConvert.DefaultValue = ((decimal)(0m));
                this.columnDiscount.DefaultValue = ((decimal)(0m));
                this.columnCharge.DefaultValue = ((decimal)(0m));
                this.columnDescription.DefaultValue = ((string)(""));
                this.columnDescription.MaxLength = 255;
                this.columnSorted.DefaultValue = ((long)(0));
                this.columnActive.DefaultValue = ((bool)(true));
                this.columnStoreID.DefaultValue = ((long)(0));
                this.columnQtyConvert.DefaultValue = ((decimal)(0m));
                this.columnRefType.DefaultValue = ((int)(0));
                this.columnProduct_Type_ID.DefaultValue = ((int)(0));
                this.columnProduct_Name.DefaultValue = ((string)(""));
                this.columnProduct_Name.MaxLength = 255;
                this.columnUnit_Name.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARD_DETAILRow NewSTOCK_INWARD_DETAILRow() {
                return ((STOCK_INWARD_DETAILRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new STOCK_INWARD_DETAILRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(STOCK_INWARD_DETAILRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STOCK_INWARD_DETAILRowChanged != null)) {
                    this.STOCK_INWARD_DETAILRowChanged(this, new STOCK_INWARD_DETAILRowChangeEvent(((STOCK_INWARD_DETAILRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STOCK_INWARD_DETAILRowChanging != null)) {
                    this.STOCK_INWARD_DETAILRowChanging(this, new STOCK_INWARD_DETAILRowChangeEvent(((STOCK_INWARD_DETAILRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STOCK_INWARD_DETAILRowDeleted != null)) {
                    this.STOCK_INWARD_DETAILRowDeleted(this, new STOCK_INWARD_DETAILRowChangeEvent(((STOCK_INWARD_DETAILRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STOCK_INWARD_DETAILRowDeleting != null)) {
                    this.STOCK_INWARD_DETAILRowDeleting(this, new STOCK_INWARD_DETAILRowChangeEvent(((STOCK_INWARD_DETAILRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTOCK_INWARD_DETAILRow(STOCK_INWARD_DETAILRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSTOCK_INWARD_DETAIL ds = new dsSTOCK_INWARD_DETAIL();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STOCK_INWARD_DETAILDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STOCK_INWARD_ByDateDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnRefDate;
            
            private global::System.Data.DataColumn columnCustomer_ID;
            
            private global::System.Data.DataColumn columnRef_OrgNo;
            
            private global::System.Data.DataColumn columnReason;
            
            private global::System.Data.DataColumn columnIsPrint;
            
            private global::System.Data.DataColumn columnIsBarcode;
            
            private global::System.Data.DataColumn columnStock_ID;
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnCustomerAddress;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnRefType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARD_ByDateDataTable() {
                this.TableName = "STOCK_INWARD_ByDate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STOCK_INWARD_ByDateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STOCK_INWARD_ByDateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefDateColumn {
                get {
                    return this.columnRefDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Customer_IDColumn {
                get {
                    return this.columnCustomer_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Ref_OrgNoColumn {
                get {
                    return this.columnRef_OrgNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReasonColumn {
                get {
                    return this.columnReason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPrintColumn {
                get {
                    return this.columnIsPrint;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsBarcodeColumn {
                get {
                    return this.columnIsBarcode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Stock_IDColumn {
                get {
                    return this.columnStock_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerAddressColumn {
                get {
                    return this.columnCustomerAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefTypeColumn {
                get {
                    return this.columnRefType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARD_ByDateRow this[int index] {
                get {
                    return ((STOCK_INWARD_ByDateRow)(this.Rows[index]));
                }
            }
            
            public event STOCK_INWARD_ByDateRowChangeEventHandler STOCK_INWARD_ByDateRowChanging;
            
            public event STOCK_INWARD_ByDateRowChangeEventHandler STOCK_INWARD_ByDateRowChanged;
            
            public event STOCK_INWARD_ByDateRowChangeEventHandler STOCK_INWARD_ByDateRowDeleting;
            
            public event STOCK_INWARD_ByDateRowChangeEventHandler STOCK_INWARD_ByDateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTOCK_INWARD_ByDateRow(STOCK_INWARD_ByDateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARD_ByDateRow AddSTOCK_INWARD_ByDateRow(string ID, System.DateTime RefDate, string Customer_ID, string Ref_OrgNo, string Reason, bool IsPrint, bool IsBarcode, string Stock_ID, string CustomerName, string CustomerAddress, decimal Amount, string Description, int RefType) {
                STOCK_INWARD_ByDateRow rowSTOCK_INWARD_ByDateRow = ((STOCK_INWARD_ByDateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        RefDate,
                        Customer_ID,
                        Ref_OrgNo,
                        Reason,
                        IsPrint,
                        IsBarcode,
                        Stock_ID,
                        CustomerName,
                        CustomerAddress,
                        Amount,
                        Description,
                        RefType};
                rowSTOCK_INWARD_ByDateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSTOCK_INWARD_ByDateRow);
                return rowSTOCK_INWARD_ByDateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                STOCK_INWARD_ByDateDataTable cln = ((STOCK_INWARD_ByDateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new STOCK_INWARD_ByDateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnRefDate = base.Columns["RefDate"];
                this.columnCustomer_ID = base.Columns["Customer_ID"];
                this.columnRef_OrgNo = base.Columns["Ref_OrgNo"];
                this.columnReason = base.Columns["Reason"];
                this.columnIsPrint = base.Columns["IsPrint"];
                this.columnIsBarcode = base.Columns["IsBarcode"];
                this.columnStock_ID = base.Columns["Stock_ID"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnCustomerAddress = base.Columns["CustomerAddress"];
                this.columnAmount = base.Columns["Amount"];
                this.columnDescription = base.Columns["Description"];
                this.columnRefType = base.Columns["RefType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnRefDate = new global::System.Data.DataColumn("RefDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefDate);
                this.columnCustomer_ID = new global::System.Data.DataColumn("Customer_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomer_ID);
                this.columnRef_OrgNo = new global::System.Data.DataColumn("Ref_OrgNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRef_OrgNo);
                this.columnReason = new global::System.Data.DataColumn("Reason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReason);
                this.columnIsPrint = new global::System.Data.DataColumn("IsPrint", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPrint);
                this.columnIsBarcode = new global::System.Data.DataColumn("IsBarcode", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsBarcode);
                this.columnStock_ID = new global::System.Data.DataColumn("Stock_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStock_ID);
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnCustomerAddress = new global::System.Data.DataColumn("CustomerAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerAddress);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnRefType = new global::System.Data.DataColumn("RefType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefType);
                this.columnID.MaxLength = 20;
                this.columnCustomer_ID.MaxLength = 20;
                this.columnRef_OrgNo.MaxLength = 20;
                this.columnReason.MaxLength = 255;
                this.columnIsPrint.ReadOnly = true;
                this.columnIsBarcode.ReadOnly = true;
                this.columnStock_ID.MaxLength = 20;
                this.columnCustomerName.MaxLength = 255;
                this.columnCustomerAddress.MaxLength = 255;
                this.columnDescription.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARD_ByDateRow NewSTOCK_INWARD_ByDateRow() {
                return ((STOCK_INWARD_ByDateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new STOCK_INWARD_ByDateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(STOCK_INWARD_ByDateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STOCK_INWARD_ByDateRowChanged != null)) {
                    this.STOCK_INWARD_ByDateRowChanged(this, new STOCK_INWARD_ByDateRowChangeEvent(((STOCK_INWARD_ByDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STOCK_INWARD_ByDateRowChanging != null)) {
                    this.STOCK_INWARD_ByDateRowChanging(this, new STOCK_INWARD_ByDateRowChangeEvent(((STOCK_INWARD_ByDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STOCK_INWARD_ByDateRowDeleted != null)) {
                    this.STOCK_INWARD_ByDateRowDeleted(this, new STOCK_INWARD_ByDateRowChangeEvent(((STOCK_INWARD_ByDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STOCK_INWARD_ByDateRowDeleting != null)) {
                    this.STOCK_INWARD_ByDateRowDeleting(this, new STOCK_INWARD_ByDateRowChangeEvent(((STOCK_INWARD_ByDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTOCK_INWARD_ByDateRow(STOCK_INWARD_ByDateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSTOCK_INWARD_DETAIL ds = new dsSTOCK_INWARD_DETAIL();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STOCK_INWARD_ByDateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STOCK_INWARDDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnRefDate;
            
            private global::System.Data.DataColumn columnCustomer_ID;
            
            private global::System.Data.DataColumn columnRef_OrgNo;
            
            private global::System.Data.DataColumn columnReason;
            
            private global::System.Data.DataColumn columnStock_ID;
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnCustomerAddress;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnRefType;
            
            private global::System.Data.DataColumn columnIsPrint;
            
            private global::System.Data.DataColumn columnIsBarcode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARDDataTable() {
                this.TableName = "STOCK_INWARD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STOCK_INWARDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STOCK_INWARDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefDateColumn {
                get {
                    return this.columnRefDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Customer_IDColumn {
                get {
                    return this.columnCustomer_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Ref_OrgNoColumn {
                get {
                    return this.columnRef_OrgNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReasonColumn {
                get {
                    return this.columnReason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Stock_IDColumn {
                get {
                    return this.columnStock_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerAddressColumn {
                get {
                    return this.columnCustomerAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefTypeColumn {
                get {
                    return this.columnRefType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPrintColumn {
                get {
                    return this.columnIsPrint;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsBarcodeColumn {
                get {
                    return this.columnIsBarcode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARDRow this[int index] {
                get {
                    return ((STOCK_INWARDRow)(this.Rows[index]));
                }
            }
            
            public event STOCK_INWARDRowChangeEventHandler STOCK_INWARDRowChanging;
            
            public event STOCK_INWARDRowChangeEventHandler STOCK_INWARDRowChanged;
            
            public event STOCK_INWARDRowChangeEventHandler STOCK_INWARDRowDeleting;
            
            public event STOCK_INWARDRowChangeEventHandler STOCK_INWARDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTOCK_INWARDRow(STOCK_INWARDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARDRow AddSTOCK_INWARDRow(string ID, System.DateTime RefDate, string Customer_ID, string Ref_OrgNo, string Reason, string Stock_ID, string CustomerName, string CustomerAddress, decimal Amount, string Description, int RefType, bool IsPrint, bool IsBarcode) {
                STOCK_INWARDRow rowSTOCK_INWARDRow = ((STOCK_INWARDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        RefDate,
                        Customer_ID,
                        Ref_OrgNo,
                        Reason,
                        Stock_ID,
                        CustomerName,
                        CustomerAddress,
                        Amount,
                        Description,
                        RefType,
                        IsPrint,
                        IsBarcode};
                rowSTOCK_INWARDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSTOCK_INWARDRow);
                return rowSTOCK_INWARDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                STOCK_INWARDDataTable cln = ((STOCK_INWARDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new STOCK_INWARDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnRefDate = base.Columns["RefDate"];
                this.columnCustomer_ID = base.Columns["Customer_ID"];
                this.columnRef_OrgNo = base.Columns["Ref_OrgNo"];
                this.columnReason = base.Columns["Reason"];
                this.columnStock_ID = base.Columns["Stock_ID"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnCustomerAddress = base.Columns["CustomerAddress"];
                this.columnAmount = base.Columns["Amount"];
                this.columnDescription = base.Columns["Description"];
                this.columnRefType = base.Columns["RefType"];
                this.columnIsPrint = base.Columns["IsPrint"];
                this.columnIsBarcode = base.Columns["IsBarcode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnRefDate = new global::System.Data.DataColumn("RefDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefDate);
                this.columnCustomer_ID = new global::System.Data.DataColumn("Customer_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomer_ID);
                this.columnRef_OrgNo = new global::System.Data.DataColumn("Ref_OrgNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRef_OrgNo);
                this.columnReason = new global::System.Data.DataColumn("Reason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReason);
                this.columnStock_ID = new global::System.Data.DataColumn("Stock_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStock_ID);
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnCustomerAddress = new global::System.Data.DataColumn("CustomerAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerAddress);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnRefType = new global::System.Data.DataColumn("RefType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefType);
                this.columnIsPrint = new global::System.Data.DataColumn("IsPrint", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPrint);
                this.columnIsBarcode = new global::System.Data.DataColumn("IsBarcode", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsBarcode);
                this.columnID.MaxLength = 20;
                this.columnCustomer_ID.MaxLength = 20;
                this.columnRef_OrgNo.MaxLength = 20;
                this.columnReason.MaxLength = 255;
                this.columnStock_ID.MaxLength = 20;
                this.columnCustomerName.MaxLength = 255;
                this.columnCustomerAddress.MaxLength = 255;
                this.columnDescription.MaxLength = 255;
                this.columnIsPrint.ReadOnly = true;
                this.columnIsBarcode.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARDRow NewSTOCK_INWARDRow() {
                return ((STOCK_INWARDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new STOCK_INWARDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(STOCK_INWARDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STOCK_INWARDRowChanged != null)) {
                    this.STOCK_INWARDRowChanged(this, new STOCK_INWARDRowChangeEvent(((STOCK_INWARDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STOCK_INWARDRowChanging != null)) {
                    this.STOCK_INWARDRowChanging(this, new STOCK_INWARDRowChangeEvent(((STOCK_INWARDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STOCK_INWARDRowDeleted != null)) {
                    this.STOCK_INWARDRowDeleted(this, new STOCK_INWARDRowChangeEvent(((STOCK_INWARDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STOCK_INWARDRowDeleting != null)) {
                    this.STOCK_INWARDRowDeleting(this, new STOCK_INWARDRowChangeEvent(((STOCK_INWARDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTOCK_INWARDRow(STOCK_INWARDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSTOCK_INWARD_DETAIL ds = new dsSTOCK_INWARD_DETAIL();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STOCK_INWARDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STOCK_INWARD_DETAIL_ByDateDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProduct_ID;
            
            private global::System.Data.DataColumn columnProduct_Name;
            
            private global::System.Data.DataColumn columnUnit_Name;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnUnitPrice;
            
            private global::System.Data.DataColumn columnProductGroup_ID;
            
            private global::System.Data.DataColumn columnProductGroup_Name;
            
            private global::System.Data.DataColumn columnStock_Name;
            
            private global::System.Data.DataColumn columnStock_ID;
            
            private global::System.Data.DataColumn columnRefDate;
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnUnit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARD_DETAIL_ByDateDataTable() {
                this.TableName = "STOCK_INWARD_DETAIL_ByDate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STOCK_INWARD_DETAIL_ByDateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STOCK_INWARD_DETAIL_ByDateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_IDColumn {
                get {
                    return this.columnProduct_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_NameColumn {
                get {
                    return this.columnProduct_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Unit_NameColumn {
                get {
                    return this.columnUnit_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitPriceColumn {
                get {
                    return this.columnUnitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProductGroup_IDColumn {
                get {
                    return this.columnProductGroup_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProductGroup_NameColumn {
                get {
                    return this.columnProductGroup_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Stock_NameColumn {
                get {
                    return this.columnStock_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Stock_IDColumn {
                get {
                    return this.columnStock_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefDateColumn {
                get {
                    return this.columnRefDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARD_DETAIL_ByDateRow this[int index] {
                get {
                    return ((STOCK_INWARD_DETAIL_ByDateRow)(this.Rows[index]));
                }
            }
            
            public event STOCK_INWARD_DETAIL_ByDateRowChangeEventHandler STOCK_INWARD_DETAIL_ByDateRowChanging;
            
            public event STOCK_INWARD_DETAIL_ByDateRowChangeEventHandler STOCK_INWARD_DETAIL_ByDateRowChanged;
            
            public event STOCK_INWARD_DETAIL_ByDateRowChangeEventHandler STOCK_INWARD_DETAIL_ByDateRowDeleting;
            
            public event STOCK_INWARD_DETAIL_ByDateRowChangeEventHandler STOCK_INWARD_DETAIL_ByDateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTOCK_INWARD_DETAIL_ByDateRow(STOCK_INWARD_DETAIL_ByDateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARD_DETAIL_ByDateRow AddSTOCK_INWARD_DETAIL_ByDateRow(string Product_ID, string Product_Name, string Unit_Name, decimal Quantity, decimal Amount, decimal UnitPrice, string ProductGroup_ID, string ProductGroup_Name, string Stock_Name, string Stock_ID, System.DateTime RefDate, string ID, string Unit) {
                STOCK_INWARD_DETAIL_ByDateRow rowSTOCK_INWARD_DETAIL_ByDateRow = ((STOCK_INWARD_DETAIL_ByDateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Product_ID,
                        Product_Name,
                        Unit_Name,
                        Quantity,
                        Amount,
                        UnitPrice,
                        ProductGroup_ID,
                        ProductGroup_Name,
                        Stock_Name,
                        Stock_ID,
                        RefDate,
                        ID,
                        Unit};
                rowSTOCK_INWARD_DETAIL_ByDateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSTOCK_INWARD_DETAIL_ByDateRow);
                return rowSTOCK_INWARD_DETAIL_ByDateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                STOCK_INWARD_DETAIL_ByDateDataTable cln = ((STOCK_INWARD_DETAIL_ByDateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new STOCK_INWARD_DETAIL_ByDateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProduct_ID = base.Columns["Product_ID"];
                this.columnProduct_Name = base.Columns["Product_Name"];
                this.columnUnit_Name = base.Columns["Unit_Name"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnAmount = base.Columns["Amount"];
                this.columnUnitPrice = base.Columns["UnitPrice"];
                this.columnProductGroup_ID = base.Columns["ProductGroup_ID"];
                this.columnProductGroup_Name = base.Columns["ProductGroup_Name"];
                this.columnStock_Name = base.Columns["Stock_Name"];
                this.columnStock_ID = base.Columns["Stock_ID"];
                this.columnRefDate = base.Columns["RefDate"];
                this.columnID = base.Columns["ID"];
                this.columnUnit = base.Columns["Unit"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProduct_ID = new global::System.Data.DataColumn("Product_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_ID);
                this.columnProduct_Name = new global::System.Data.DataColumn("Product_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_Name);
                this.columnUnit_Name = new global::System.Data.DataColumn("Unit_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit_Name);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnUnitPrice = new global::System.Data.DataColumn("UnitPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitPrice);
                this.columnProductGroup_ID = new global::System.Data.DataColumn("ProductGroup_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductGroup_ID);
                this.columnProductGroup_Name = new global::System.Data.DataColumn("ProductGroup_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductGroup_Name);
                this.columnStock_Name = new global::System.Data.DataColumn("Stock_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStock_Name);
                this.columnStock_ID = new global::System.Data.DataColumn("Stock_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStock_ID);
                this.columnRefDate = new global::System.Data.DataColumn("RefDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefDate);
                this.columnID = new global::System.Data.DataColumn("ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnUnit = new global::System.Data.DataColumn("Unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit);
                this.columnProduct_ID.MaxLength = 20;
                this.columnProduct_Name.MaxLength = 255;
                this.columnUnit_Name.MaxLength = 250;
                this.columnAmount.ReadOnly = true;
                this.columnUnitPrice.ReadOnly = true;
                this.columnProductGroup_ID.MaxLength = 20;
                this.columnProductGroup_Name.MaxLength = 255;
                this.columnStock_Name.MaxLength = 255;
                this.columnStock_ID.MaxLength = 20;
                this.columnID.MaxLength = 20;
                this.columnUnit.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARD_DETAIL_ByDateRow NewSTOCK_INWARD_DETAIL_ByDateRow() {
                return ((STOCK_INWARD_DETAIL_ByDateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new STOCK_INWARD_DETAIL_ByDateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(STOCK_INWARD_DETAIL_ByDateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STOCK_INWARD_DETAIL_ByDateRowChanged != null)) {
                    this.STOCK_INWARD_DETAIL_ByDateRowChanged(this, new STOCK_INWARD_DETAIL_ByDateRowChangeEvent(((STOCK_INWARD_DETAIL_ByDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STOCK_INWARD_DETAIL_ByDateRowChanging != null)) {
                    this.STOCK_INWARD_DETAIL_ByDateRowChanging(this, new STOCK_INWARD_DETAIL_ByDateRowChangeEvent(((STOCK_INWARD_DETAIL_ByDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STOCK_INWARD_DETAIL_ByDateRowDeleted != null)) {
                    this.STOCK_INWARD_DETAIL_ByDateRowDeleted(this, new STOCK_INWARD_DETAIL_ByDateRowChangeEvent(((STOCK_INWARD_DETAIL_ByDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STOCK_INWARD_DETAIL_ByDateRowDeleting != null)) {
                    this.STOCK_INWARD_DETAIL_ByDateRowDeleting(this, new STOCK_INWARD_DETAIL_ByDateRowChangeEvent(((STOCK_INWARD_DETAIL_ByDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTOCK_INWARD_DETAIL_ByDateRow(STOCK_INWARD_DETAIL_ByDateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSTOCK_INWARD_DETAIL ds = new dsSTOCK_INWARD_DETAIL();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STOCK_INWARD_DETAIL_ByDateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STOCK_INWARD_DETAILRow : global::System.Data.DataRow {
            
            private STOCK_INWARD_DETAILDataTable tableSTOCK_INWARD_DETAIL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STOCK_INWARD_DETAILRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTOCK_INWARD_DETAIL = ((STOCK_INWARD_DETAILDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Error {
                get {
                    try {
                        return ((int)(this[this.tableSTOCK_INWARD_DETAIL.ErrorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Error\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.ErrorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorText {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL.ErrorTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorText\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.ErrorTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Inward_ID {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL.Inward_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Inward_ID\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.Inward_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Product_ID {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL.Product_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Product_ID\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.Product_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemID {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL.ItemIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemID\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.ItemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Stock_ID {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL.Stock_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Stock_ID\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.Stock_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Limit {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTOCK_INWARD_DETAIL.LimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Limit\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.LimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Vat {
                get {
                    try {
                        return ((int)(this[this.tableSTOCK_INWARD_DETAIL.VatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Vat\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.VatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Width {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_INWARD_DETAIL.WidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Width\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.WidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Height {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_INWARD_DETAIL.HeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Height\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.HeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Orgin {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL.OrginColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Orgin\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.OrginColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CurrentQty {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_INWARD_DETAIL.CurrentQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentQty\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.CurrentQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quantity {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_INWARD_DETAIL.QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quantity\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UnitPrice {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_INWARD_DETAIL.UnitPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitPrice\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.UnitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_INWARD_DETAIL.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Batch {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL.BatchColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Batch\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.BatchColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Serial {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL.SerialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Serial\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.SerialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unit {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL.UnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.UnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UnitConvert {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_INWARD_DETAIL.UnitConvertColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitConvert\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.UnitConvertColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Discount {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_INWARD_DETAIL.DiscountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Discount\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.DiscountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Charge {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_INWARD_DETAIL.ChargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Charge\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.ChargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Sorted {
                get {
                    try {
                        return ((long)(this[this.tableSTOCK_INWARD_DETAIL.SortedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sorted\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.SortedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    try {
                        return ((bool)(this[this.tableSTOCK_INWARD_DETAIL.ActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Active\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long StoreID {
                get {
                    try {
                        return ((long)(this[this.tableSTOCK_INWARD_DETAIL.StoreIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoreID\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.StoreIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QtyConvert {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_INWARD_DETAIL.QtyConvertColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QtyConvert\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.QtyConvertColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefType {
                get {
                    try {
                        return ((int)(this[this.tableSTOCK_INWARD_DETAIL.RefTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefType\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.RefTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableSTOCK_INWARD_DETAIL.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Product_Type_ID {
                get {
                    try {
                        return ((int)(this[this.tableSTOCK_INWARD_DETAIL.Product_Type_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Product_Type_ID\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.Product_Type_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Product_Name {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL.Product_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Product_Name\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.Product_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unit_Name {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL.Unit_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit_Name\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.Unit_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int X {
                get {
                    try {
                        return ((int)(this[this.tableSTOCK_INWARD_DETAIL.XColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'X\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.XColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Y {
                get {
                    try {
                        return ((int)(this[this.tableSTOCK_INWARD_DETAIL.YColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Y\' in table \'STOCK_INWARD_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL.YColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.ErrorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorNull() {
                this[this.tableSTOCK_INWARD_DETAIL.ErrorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorTextNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.ErrorTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorTextNull() {
                this[this.tableSTOCK_INWARD_DETAIL.ErrorTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInward_IDNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.Inward_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInward_IDNull() {
                this[this.tableSTOCK_INWARD_DETAIL.Inward_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProduct_IDNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.Product_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProduct_IDNull() {
                this[this.tableSTOCK_INWARD_DETAIL.Product_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemIDNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.ItemIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemIDNull() {
                this[this.tableSTOCK_INWARD_DETAIL.ItemIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStock_IDNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.Stock_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStock_IDNull() {
                this[this.tableSTOCK_INWARD_DETAIL.Stock_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLimitNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.LimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLimitNull() {
                this[this.tableSTOCK_INWARD_DETAIL.LimitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVatNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.VatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVatNull() {
                this[this.tableSTOCK_INWARD_DETAIL.VatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWidthNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.WidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWidthNull() {
                this[this.tableSTOCK_INWARD_DETAIL.WidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeightNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.HeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeightNull() {
                this[this.tableSTOCK_INWARD_DETAIL.HeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrginNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.OrginColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrginNull() {
                this[this.tableSTOCK_INWARD_DETAIL.OrginColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tableSTOCK_INWARD_DETAIL.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentQtyNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.CurrentQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentQtyNull() {
                this[this.tableSTOCK_INWARD_DETAIL.CurrentQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tableSTOCK_INWARD_DETAIL.QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitPriceNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.UnitPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitPriceNull() {
                this[this.tableSTOCK_INWARD_DETAIL.UnitPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableSTOCK_INWARD_DETAIL.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBatchNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.BatchColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBatchNull() {
                this[this.tableSTOCK_INWARD_DETAIL.BatchColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSerialNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.SerialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSerialNull() {
                this[this.tableSTOCK_INWARD_DETAIL.SerialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.UnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNull() {
                this[this.tableSTOCK_INWARD_DETAIL.UnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitConvertNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.UnitConvertColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitConvertNull() {
                this[this.tableSTOCK_INWARD_DETAIL.UnitConvertColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscountNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.DiscountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscountNull() {
                this[this.tableSTOCK_INWARD_DETAIL.DiscountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChargeNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.ChargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChargeNull() {
                this[this.tableSTOCK_INWARD_DETAIL.ChargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableSTOCK_INWARD_DETAIL.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortedNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.SortedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortedNull() {
                this[this.tableSTOCK_INWARD_DETAIL.SortedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActiveNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.ActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActiveNull() {
                this[this.tableSTOCK_INWARD_DETAIL.ActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoreIDNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.StoreIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoreIDNull() {
                this[this.tableSTOCK_INWARD_DETAIL.StoreIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQtyConvertNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.QtyConvertColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQtyConvertNull() {
                this[this.tableSTOCK_INWARD_DETAIL.QtyConvertColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefTypeNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.RefTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefTypeNull() {
                this[this.tableSTOCK_INWARD_DETAIL.RefTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableSTOCK_INWARD_DETAIL.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProduct_Type_IDNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.Product_Type_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProduct_Type_IDNull() {
                this[this.tableSTOCK_INWARD_DETAIL.Product_Type_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProduct_NameNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.Product_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProduct_NameNull() {
                this[this.tableSTOCK_INWARD_DETAIL.Product_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnit_NameNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.Unit_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnit_NameNull() {
                this[this.tableSTOCK_INWARD_DETAIL.Unit_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.XColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXNull() {
                this[this.tableSTOCK_INWARD_DETAIL.XColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL.YColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYNull() {
                this[this.tableSTOCK_INWARD_DETAIL.YColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STOCK_INWARD_ByDateRow : global::System.Data.DataRow {
            
            private STOCK_INWARD_ByDateDataTable tableSTOCK_INWARD_ByDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STOCK_INWARD_ByDateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTOCK_INWARD_ByDate = ((STOCK_INWARD_ByDateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_ByDate.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'STOCK_INWARD_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_ByDate.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RefDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTOCK_INWARD_ByDate.RefDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefDate\' in table \'STOCK_INWARD_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_ByDate.RefDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Customer_ID {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_ByDate.Customer_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Customer_ID\' in table \'STOCK_INWARD_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_ByDate.Customer_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ref_OrgNo {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_ByDate.Ref_OrgNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ref_OrgNo\' in table \'STOCK_INWARD_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_ByDate.Ref_OrgNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Reason {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_ByDate.ReasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Reason\' in table \'STOCK_INWARD_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_ByDate.ReasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrint {
                get {
                    try {
                        return ((bool)(this[this.tableSTOCK_INWARD_ByDate.IsPrintColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPrint\' in table \'STOCK_INWARD_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_ByDate.IsPrintColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarcode {
                get {
                    try {
                        return ((bool)(this[this.tableSTOCK_INWARD_ByDate.IsBarcodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsBarcode\' in table \'STOCK_INWARD_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_ByDate.IsBarcodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Stock_ID {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_ByDate.Stock_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Stock_ID\' in table \'STOCK_INWARD_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_ByDate.Stock_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_ByDate.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'STOCK_INWARD_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_ByDate.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerAddress {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_ByDate.CustomerAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerAddress\' in table \'STOCK_INWARD_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_ByDate.CustomerAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_INWARD_ByDate.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'STOCK_INWARD_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_ByDate.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_ByDate.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'STOCK_INWARD_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_ByDate.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefType {
                get {
                    try {
                        return ((int)(this[this.tableSTOCK_INWARD_ByDate.RefTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefType\' in table \'STOCK_INWARD_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_ByDate.RefTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableSTOCK_INWARD_ByDate.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableSTOCK_INWARD_ByDate.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefDateNull() {
                return this.IsNull(this.tableSTOCK_INWARD_ByDate.RefDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefDateNull() {
                this[this.tableSTOCK_INWARD_ByDate.RefDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomer_IDNull() {
                return this.IsNull(this.tableSTOCK_INWARD_ByDate.Customer_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomer_IDNull() {
                this[this.tableSTOCK_INWARD_ByDate.Customer_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRef_OrgNoNull() {
                return this.IsNull(this.tableSTOCK_INWARD_ByDate.Ref_OrgNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRef_OrgNoNull() {
                this[this.tableSTOCK_INWARD_ByDate.Ref_OrgNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReasonNull() {
                return this.IsNull(this.tableSTOCK_INWARD_ByDate.ReasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReasonNull() {
                this[this.tableSTOCK_INWARD_ByDate.ReasonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPrintNull() {
                return this.IsNull(this.tableSTOCK_INWARD_ByDate.IsPrintColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPrintNull() {
                this[this.tableSTOCK_INWARD_ByDate.IsPrintColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsBarcodeNull() {
                return this.IsNull(this.tableSTOCK_INWARD_ByDate.IsBarcodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsBarcodeNull() {
                this[this.tableSTOCK_INWARD_ByDate.IsBarcodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStock_IDNull() {
                return this.IsNull(this.tableSTOCK_INWARD_ByDate.Stock_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStock_IDNull() {
                this[this.tableSTOCK_INWARD_ByDate.Stock_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableSTOCK_INWARD_ByDate.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableSTOCK_INWARD_ByDate.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerAddressNull() {
                return this.IsNull(this.tableSTOCK_INWARD_ByDate.CustomerAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerAddressNull() {
                this[this.tableSTOCK_INWARD_ByDate.CustomerAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableSTOCK_INWARD_ByDate.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableSTOCK_INWARD_ByDate.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableSTOCK_INWARD_ByDate.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableSTOCK_INWARD_ByDate.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefTypeNull() {
                return this.IsNull(this.tableSTOCK_INWARD_ByDate.RefTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefTypeNull() {
                this[this.tableSTOCK_INWARD_ByDate.RefTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STOCK_INWARDRow : global::System.Data.DataRow {
            
            private STOCK_INWARDDataTable tableSTOCK_INWARD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STOCK_INWARDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTOCK_INWARD = ((STOCK_INWARDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'STOCK_INWARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RefDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTOCK_INWARD.RefDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefDate\' in table \'STOCK_INWARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD.RefDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Customer_ID {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD.Customer_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Customer_ID\' in table \'STOCK_INWARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD.Customer_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ref_OrgNo {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD.Ref_OrgNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ref_OrgNo\' in table \'STOCK_INWARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD.Ref_OrgNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Reason {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD.ReasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Reason\' in table \'STOCK_INWARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD.ReasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Stock_ID {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD.Stock_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Stock_ID\' in table \'STOCK_INWARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD.Stock_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'STOCK_INWARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerAddress {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD.CustomerAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerAddress\' in table \'STOCK_INWARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD.CustomerAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_INWARD.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'STOCK_INWARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'STOCK_INWARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefType {
                get {
                    try {
                        return ((int)(this[this.tableSTOCK_INWARD.RefTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefType\' in table \'STOCK_INWARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD.RefTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrint {
                get {
                    try {
                        return ((bool)(this[this.tableSTOCK_INWARD.IsPrintColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPrint\' in table \'STOCK_INWARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD.IsPrintColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarcode {
                get {
                    try {
                        return ((bool)(this[this.tableSTOCK_INWARD.IsBarcodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsBarcode\' in table \'STOCK_INWARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD.IsBarcodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableSTOCK_INWARD.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableSTOCK_INWARD.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefDateNull() {
                return this.IsNull(this.tableSTOCK_INWARD.RefDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefDateNull() {
                this[this.tableSTOCK_INWARD.RefDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomer_IDNull() {
                return this.IsNull(this.tableSTOCK_INWARD.Customer_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomer_IDNull() {
                this[this.tableSTOCK_INWARD.Customer_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRef_OrgNoNull() {
                return this.IsNull(this.tableSTOCK_INWARD.Ref_OrgNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRef_OrgNoNull() {
                this[this.tableSTOCK_INWARD.Ref_OrgNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReasonNull() {
                return this.IsNull(this.tableSTOCK_INWARD.ReasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReasonNull() {
                this[this.tableSTOCK_INWARD.ReasonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStock_IDNull() {
                return this.IsNull(this.tableSTOCK_INWARD.Stock_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStock_IDNull() {
                this[this.tableSTOCK_INWARD.Stock_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableSTOCK_INWARD.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableSTOCK_INWARD.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerAddressNull() {
                return this.IsNull(this.tableSTOCK_INWARD.CustomerAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerAddressNull() {
                this[this.tableSTOCK_INWARD.CustomerAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableSTOCK_INWARD.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableSTOCK_INWARD.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableSTOCK_INWARD.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableSTOCK_INWARD.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefTypeNull() {
                return this.IsNull(this.tableSTOCK_INWARD.RefTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefTypeNull() {
                this[this.tableSTOCK_INWARD.RefTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPrintNull() {
                return this.IsNull(this.tableSTOCK_INWARD.IsPrintColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPrintNull() {
                this[this.tableSTOCK_INWARD.IsPrintColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsBarcodeNull() {
                return this.IsNull(this.tableSTOCK_INWARD.IsBarcodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsBarcodeNull() {
                this[this.tableSTOCK_INWARD.IsBarcodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STOCK_INWARD_DETAIL_ByDateRow : global::System.Data.DataRow {
            
            private STOCK_INWARD_DETAIL_ByDateDataTable tableSTOCK_INWARD_DETAIL_ByDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STOCK_INWARD_DETAIL_ByDateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTOCK_INWARD_DETAIL_ByDate = ((STOCK_INWARD_DETAIL_ByDateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Product_ID {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL_ByDate.Product_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Product_ID\' in table \'STOCK_INWARD_DETAIL_ByDate\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL_ByDate.Product_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Product_Name {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL_ByDate.Product_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Product_Name\' in table \'STOCK_INWARD_DETAIL_ByDate\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL_ByDate.Product_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unit_Name {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL_ByDate.Unit_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit_Name\' in table \'STOCK_INWARD_DETAIL_ByDate\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL_ByDate.Unit_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quantity {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_INWARD_DETAIL_ByDate.QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quantity\' in table \'STOCK_INWARD_DETAIL_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL_ByDate.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_INWARD_DETAIL_ByDate.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'STOCK_INWARD_DETAIL_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL_ByDate.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UnitPrice {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_INWARD_DETAIL_ByDate.UnitPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitPrice\' in table \'STOCK_INWARD_DETAIL_ByDate\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL_ByDate.UnitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductGroup_ID {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL_ByDate.ProductGroup_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProductGroup_ID\' in table \'STOCK_INWARD_DETAIL_ByDate\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL_ByDate.ProductGroup_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductGroup_Name {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL_ByDate.ProductGroup_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProductGroup_Name\' in table \'STOCK_INWARD_DETAIL_ByDate\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL_ByDate.ProductGroup_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Stock_Name {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL_ByDate.Stock_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Stock_Name\' in table \'STOCK_INWARD_DETAIL_ByDate\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL_ByDate.Stock_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Stock_ID {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL_ByDate.Stock_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Stock_ID\' in table \'STOCK_INWARD_DETAIL_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL_ByDate.Stock_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RefDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTOCK_INWARD_DETAIL_ByDate.RefDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefDate\' in table \'STOCK_INWARD_DETAIL_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL_ByDate.RefDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL_ByDate.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'STOCK_INWARD_DETAIL_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL_ByDate.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unit {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_INWARD_DETAIL_ByDate.UnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit\' in table \'STOCK_INWARD_DETAIL_ByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_INWARD_DETAIL_ByDate.UnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProduct_IDNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL_ByDate.Product_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProduct_IDNull() {
                this[this.tableSTOCK_INWARD_DETAIL_ByDate.Product_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProduct_NameNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL_ByDate.Product_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProduct_NameNull() {
                this[this.tableSTOCK_INWARD_DETAIL_ByDate.Product_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnit_NameNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL_ByDate.Unit_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnit_NameNull() {
                this[this.tableSTOCK_INWARD_DETAIL_ByDate.Unit_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL_ByDate.QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tableSTOCK_INWARD_DETAIL_ByDate.QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL_ByDate.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableSTOCK_INWARD_DETAIL_ByDate.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitPriceNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL_ByDate.UnitPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitPriceNull() {
                this[this.tableSTOCK_INWARD_DETAIL_ByDate.UnitPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductGroup_IDNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL_ByDate.ProductGroup_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductGroup_IDNull() {
                this[this.tableSTOCK_INWARD_DETAIL_ByDate.ProductGroup_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductGroup_NameNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL_ByDate.ProductGroup_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductGroup_NameNull() {
                this[this.tableSTOCK_INWARD_DETAIL_ByDate.ProductGroup_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStock_NameNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL_ByDate.Stock_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStock_NameNull() {
                this[this.tableSTOCK_INWARD_DETAIL_ByDate.Stock_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStock_IDNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL_ByDate.Stock_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStock_IDNull() {
                this[this.tableSTOCK_INWARD_DETAIL_ByDate.Stock_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefDateNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL_ByDate.RefDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefDateNull() {
                this[this.tableSTOCK_INWARD_DETAIL_ByDate.RefDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL_ByDate.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableSTOCK_INWARD_DETAIL_ByDate.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNull() {
                return this.IsNull(this.tableSTOCK_INWARD_DETAIL_ByDate.UnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNull() {
                this[this.tableSTOCK_INWARD_DETAIL_ByDate.UnitColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STOCK_INWARD_DETAILRowChangeEvent : global::System.EventArgs {
            
            private STOCK_INWARD_DETAILRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARD_DETAILRowChangeEvent(STOCK_INWARD_DETAILRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARD_DETAILRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STOCK_INWARD_ByDateRowChangeEvent : global::System.EventArgs {
            
            private STOCK_INWARD_ByDateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARD_ByDateRowChangeEvent(STOCK_INWARD_ByDateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARD_ByDateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STOCK_INWARDRowChangeEvent : global::System.EventArgs {
            
            private STOCK_INWARDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARDRowChangeEvent(STOCK_INWARDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STOCK_INWARD_DETAIL_ByDateRowChangeEvent : global::System.EventArgs {
            
            private STOCK_INWARD_DETAIL_ByDateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARD_DETAIL_ByDateRowChangeEvent(STOCK_INWARD_DETAIL_ByDateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCK_INWARD_DETAIL_ByDateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Perfect.Inventory.Core.Inventory.Inward.dsSTOCK_INWARD_DETAILTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STOCK_INWARD_DETAILTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STOCK_INWARD_DETAILTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STOCK_INWARD_DETAIL";
            tableMapping.ColumnMappings.Add("Error", "Error");
            tableMapping.ColumnMappings.Add("ErrorText", "ErrorText");
            tableMapping.ColumnMappings.Add("Inward_ID", "Inward_ID");
            tableMapping.ColumnMappings.Add("Product_ID", "Product_ID");
            tableMapping.ColumnMappings.Add("ItemID", "ItemID");
            tableMapping.ColumnMappings.Add("Stock_ID", "Stock_ID");
            tableMapping.ColumnMappings.Add("Limit", "Limit");
            tableMapping.ColumnMappings.Add("Vat", "Vat");
            tableMapping.ColumnMappings.Add("Width", "Width");
            tableMapping.ColumnMappings.Add("Height", "Height");
            tableMapping.ColumnMappings.Add("Orgin", "Orgin");
            tableMapping.ColumnMappings.Add("Size", "Size");
            tableMapping.ColumnMappings.Add("CurrentQty", "CurrentQty");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("UnitPrice", "UnitPrice");
            tableMapping.ColumnMappings.Add("Amount", "Amount");
            tableMapping.ColumnMappings.Add("Batch", "Batch");
            tableMapping.ColumnMappings.Add("Serial", "Serial");
            tableMapping.ColumnMappings.Add("Unit", "Unit");
            tableMapping.ColumnMappings.Add("UnitConvert", "UnitConvert");
            tableMapping.ColumnMappings.Add("Discount", "Discount");
            tableMapping.ColumnMappings.Add("Charge", "Charge");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("Sorted", "Sorted");
            tableMapping.ColumnMappings.Add("Active", "Active");
            tableMapping.ColumnMappings.Add("StoreID", "StoreID");
            tableMapping.ColumnMappings.Add("QtyConvert", "QtyConvert");
            tableMapping.ColumnMappings.Add("RefType", "RefType");
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Product_Type_ID", "Product_Type_ID");
            tableMapping.ColumnMappings.Add("Product_Name", "Product_Name");
            tableMapping.ColumnMappings.Add("Unit_Name", "Unit_Name");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Perfect.Inventory.Core.Properties.Settings.Default.ERP_THANHTAMConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        0 AS Error, '' AS ErrorText, STOCK_INWARD_DETAIL.Inward_ID, STOCK_INWARD_DETAIL.Product_ID, STOCK_INWARD_DETAIL.Product_ID AS ItemID, 
                         STOCK_INWARD_DETAIL.Stock_ID, STOCK_INWARD_DETAIL.Limit, STOCK_INWARD_DETAIL.Vat, STOCK_INWARD_DETAIL.Width, STOCK_INWARD_DETAIL.Height, 
                         STOCK_INWARD_DETAIL.Orgin, STOCK_INWARD_DETAIL.Size, STOCK_INWARD_DETAIL.CurrentQty, STOCK_INWARD_DETAIL.Quantity, 
                         STOCK_INWARD_DETAIL.UnitPrice, STOCK_INWARD_DETAIL.Amount, STOCK_INWARD_DETAIL.Batch, STOCK_INWARD_DETAIL.Serial, 
                         STOCK_INWARD_DETAIL.Unit, STOCK_INWARD_DETAIL.UnitConvert, STOCK_INWARD_DETAIL.Discount, STOCK_INWARD_DETAIL.Charge, 
                         STOCK_INWARD_DETAIL.Description, STOCK_INWARD_DETAIL.Sorted, STOCK_INWARD_DETAIL.Active, STOCK_INWARD_DETAIL.StoreID, 
                         STOCK_INWARD_DETAIL.QtyConvert, STOCK_INWARD_DETAIL.RefType, STOCK_INWARD_DETAIL.ID, PRODUCT.Product_Type_ID, PRODUCT.Product_Name, 
                         UNIT.Unit_Name
FROM            STOCK_INWARD_DETAIL INNER JOIN
                         PRODUCT ON STOCK_INWARD_DETAIL.Product_ID = PRODUCT.Product_ID INNER JOIN
                         UNIT ON STOCK_INWARD_DETAIL.Unit = UNIT.Unit_ID
WHERE        (STOCK_INWARD_DETAIL.Inward_ID = @Inward_ID)
ORDER BY STOCK_INWARD_DETAIL.Sorted";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Inward_ID", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "Inward_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsSTOCK_INWARD_DETAIL.STOCK_INWARD_DETAILDataTable dataTable, string Inward_ID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((Inward_ID == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Inward_ID));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsSTOCK_INWARD_DETAIL.STOCK_INWARD_DETAILDataTable GetData(string Inward_ID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((Inward_ID == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Inward_ID));
            }
            dsSTOCK_INWARD_DETAIL.STOCK_INWARD_DETAILDataTable dataTable = new dsSTOCK_INWARD_DETAIL.STOCK_INWARD_DETAILDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STOCK_INWARD_ByDateTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STOCK_INWARD_ByDateTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STOCK_INWARD_ByDate";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("RefDate", "RefDate");
            tableMapping.ColumnMappings.Add("Customer_ID", "Customer_ID");
            tableMapping.ColumnMappings.Add("Ref_OrgNo", "Ref_OrgNo");
            tableMapping.ColumnMappings.Add("Reason", "Reason");
            tableMapping.ColumnMappings.Add("IsPrint", "IsPrint");
            tableMapping.ColumnMappings.Add("IsBarcode", "IsBarcode");
            tableMapping.ColumnMappings.Add("Stock_ID", "Stock_ID");
            tableMapping.ColumnMappings.Add("CustomerName", "CustomerName");
            tableMapping.ColumnMappings.Add("CustomerAddress", "CustomerAddress");
            tableMapping.ColumnMappings.Add("Amount", "Amount");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("RefType", "RefType");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Perfect.Inventory.Core.Properties.Settings.Default.ERP_THANHTAMConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        ID, RefDate, Customer_ID, Ref_OrgNo, Reason, CAST(0 AS bit) AS IsPrint, CAST(0 AS bit) AS IsBarcode, Stock_ID, CustomerName, CustomerAddress, Amount, 
                         Description, RefType
FROM            STOCK_INWARD
WHERE        (DATEDIFF(day, @FromDate, RefDate) >= 0) AND (DATEDIFF(day, @ToDate, RefDate) <= 0)
ORDER BY Sorted DESC";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FromDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsSTOCK_INWARD_DETAIL.STOCK_INWARD_ByDateDataTable dataTable, System.DateTime FromDate, System.DateTime ToDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(FromDate));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(ToDate));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsSTOCK_INWARD_DETAIL.STOCK_INWARD_ByDateDataTable GetData(System.DateTime FromDate, System.DateTime ToDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(FromDate));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(ToDate));
            dsSTOCK_INWARD_DETAIL.STOCK_INWARD_ByDateDataTable dataTable = new dsSTOCK_INWARD_DETAIL.STOCK_INWARD_ByDateDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STOCK_INWARDTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STOCK_INWARDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STOCK_INWARD";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("RefDate", "RefDate");
            tableMapping.ColumnMappings.Add("Customer_ID", "Customer_ID");
            tableMapping.ColumnMappings.Add("Ref_OrgNo", "Ref_OrgNo");
            tableMapping.ColumnMappings.Add("Reason", "Reason");
            tableMapping.ColumnMappings.Add("Stock_ID", "Stock_ID");
            tableMapping.ColumnMappings.Add("CustomerName", "CustomerName");
            tableMapping.ColumnMappings.Add("CustomerAddress", "CustomerAddress");
            tableMapping.ColumnMappings.Add("Amount", "Amount");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("RefType", "RefType");
            tableMapping.ColumnMappings.Add("IsPrint", "IsPrint");
            tableMapping.ColumnMappings.Add("IsBarcode", "IsBarcode");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Perfect.Inventory.Core.Properties.Settings.Default.ERP_THANHTAMConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        ID, RefDate, Customer_ID, Ref_OrgNo, Reason, Stock_ID, CustomerName, CustomerAddress, Amount, Description, RefType, CAST(0 AS bit) AS IsPrint, CAST(0 AS bit) 
                         AS IsBarcode
FROM            STOCK_INWARD
WHERE        (ID = @ID)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsSTOCK_INWARD_DETAIL.STOCK_INWARDDataTable dataTable, string ID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ID == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(ID));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsSTOCK_INWARD_DETAIL.STOCK_INWARDDataTable GetData(string ID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ID == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(ID));
            }
            dsSTOCK_INWARD_DETAIL.STOCK_INWARDDataTable dataTable = new dsSTOCK_INWARD_DETAIL.STOCK_INWARDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STOCK_INWARD_DETAIL_ByDateTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STOCK_INWARD_DETAIL_ByDateTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STOCK_INWARD_DETAIL_ByDate";
            tableMapping.ColumnMappings.Add("Product_ID", "Product_ID");
            tableMapping.ColumnMappings.Add("Product_Name", "Product_Name");
            tableMapping.ColumnMappings.Add("Unit_Name", "Unit_Name");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("Amount", "Amount");
            tableMapping.ColumnMappings.Add("UnitPrice", "UnitPrice");
            tableMapping.ColumnMappings.Add("ProductGroup_ID", "ProductGroup_ID");
            tableMapping.ColumnMappings.Add("ProductGroup_Name", "ProductGroup_Name");
            tableMapping.ColumnMappings.Add("Stock_Name", "Stock_Name");
            tableMapping.ColumnMappings.Add("Stock_ID", "Stock_ID");
            tableMapping.ColumnMappings.Add("RefDate", "RefDate");
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Unit", "Unit");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Perfect.Inventory.Core.Properties.Settings.Default.ERP_THANHTAMConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        STOCK_INWARD_DETAIL.Product_ID, PRODUCT.Product_Name, UNIT.Unit_Name, STOCK_INWARD_DETAIL.Quantity, 
                         STOCK_INWARD_DETAIL.Amount * STOCK_INWARD.ExchangeRate AS Amount, 
                         CASE WHEN STOCK_INWARD_DETAIL.Quantity = 0 THEN 0 ELSE STOCK_INWARD_DETAIL.Amount * STOCK_INWARD.ExchangeRate / STOCK_INWARD_DETAIL.Quantity
                          END AS UnitPrice, PRODUCT_GROUP.ProductGroup_ID, PRODUCT_GROUP.ProductGroup_Name, STOCK.Stock_Name, STOCK.Stock_ID, STOCK_INWARD.RefDate, 
                         STOCK_INWARD.ID, PRODUCT.Unit
FROM            STOCK_INWARD_DETAIL INNER JOIN
                         STOCK ON STOCK_INWARD_DETAIL.Stock_ID = STOCK.Stock_ID INNER JOIN
                         PRODUCT ON STOCK_INWARD_DETAIL.Product_ID = PRODUCT.Product_ID INNER JOIN
                         PRODUCT_GROUP ON PRODUCT.Product_Group_ID = PRODUCT_GROUP.ProductGroup_ID INNER JOIN
                         STOCK_INWARD ON STOCK_INWARD_DETAIL.Inward_ID = STOCK_INWARD.ID INNER JOIN
                         UNIT ON PRODUCT.Unit = UNIT.Unit_ID
WHERE        (DATEDIFF(day, @FromDate, STOCK_INWARD.RefDate) >= 0) AND (DATEDIFF(day, @ToDate, STOCK_INWARD.RefDate) <= 0)
ORDER BY STOCK_INWARD.RefDate DESC";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FromDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsSTOCK_INWARD_DETAIL.STOCK_INWARD_DETAIL_ByDateDataTable dataTable, System.DateTime FromDate, System.DateTime ToDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(FromDate));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(ToDate));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsSTOCK_INWARD_DETAIL.STOCK_INWARD_DETAIL_ByDateDataTable GetData(System.DateTime FromDate, System.DateTime ToDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(FromDate));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(ToDate));
            dsSTOCK_INWARD_DETAIL.STOCK_INWARD_DETAIL_ByDateDataTable dataTable = new dsSTOCK_INWARD_DETAIL.STOCK_INWARD_DETAIL_ByDateDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(dsSTOCK_INWARD_DETAIL dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(dsSTOCK_INWARD_DETAIL dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(dsSTOCK_INWARD_DETAIL dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(dsSTOCK_INWARD_DETAIL dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591