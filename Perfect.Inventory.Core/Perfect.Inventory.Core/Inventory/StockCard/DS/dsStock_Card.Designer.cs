//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Perfect.Inventory.Core.Inventory.StockCard.DS {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsStock_Card")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsStock_Card : global::System.Data.DataSet {
        
        private STOCK_CARDDataTable tableSTOCK_CARD;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public dsStock_Card() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected dsStock_Card(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["STOCK_CARD"] != null)) {
                    base.Tables.Add(new STOCK_CARDDataTable(ds.Tables["STOCK_CARD"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STOCK_CARDDataTable STOCK_CARD {
            get {
                return this.tableSTOCK_CARD;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            dsStock_Card cln = ((dsStock_Card)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["STOCK_CARD"] != null)) {
                    base.Tables.Add(new STOCK_CARDDataTable(ds.Tables["STOCK_CARD"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableSTOCK_CARD = ((STOCK_CARDDataTable)(base.Tables["STOCK_CARD"]));
            if ((initTable == true)) {
                if ((this.tableSTOCK_CARD != null)) {
                    this.tableSTOCK_CARD.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass() {
            this.DataSetName = "dsStock_Card";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsStock_Card.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSTOCK_CARD = new STOCK_CARDDataTable();
            base.Tables.Add(this.tableSTOCK_CARD);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeSTOCK_CARD() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsStock_Card ds = new dsStock_Card();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void STOCK_CARDRowChangeEventHandler(object sender, STOCK_CARDRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STOCK_CARDDataTable : global::System.Data.TypedTableBase<STOCK_CARDRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnRefNo;
            
            private global::System.Data.DataColumn columnRefDate;
            
            private global::System.Data.DataColumn columnStock_ID;
            
            private global::System.Data.DataColumn columnProduct_ID;
            
            private global::System.Data.DataColumn columnProduct_Name;
            
            private global::System.Data.DataColumn columnBatch;
            
            private global::System.Data.DataColumn columnSerial;
            
            private global::System.Data.DataColumn columnUnit;
            
            private global::System.Data.DataColumn columnPrice;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnUnitPrice;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnSorted;
            
            private global::System.Data.DataColumn columnInRefNo;
            
            private global::System.Data.DataColumn columnOutRefNo;
            
            private global::System.Data.DataColumn columnRefDateShow;
            
            private global::System.Data.DataColumn columnRefType;
            
            private global::System.Data.DataColumn columnRefStatus;
            
            private global::System.Data.DataColumn columnInQuantity;
            
            private global::System.Data.DataColumn columnOutQuantity;
            
            private global::System.Data.DataColumn columnRealQuantity;
            
            private global::System.Data.DataColumn columnE_Quantity;
            
            private global::System.Data.DataColumn columnUnit_Name;
            
            private global::System.Data.DataColumn columnStock_Name;
            
            private global::System.Data.DataColumn columnReftypeName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public STOCK_CARDDataTable() {
                this.TableName = "STOCK_CARD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal STOCK_CARDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected STOCK_CARDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn RefNoColumn {
                get {
                    return this.columnRefNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn RefDateColumn {
                get {
                    return this.columnRefDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Stock_IDColumn {
                get {
                    return this.columnStock_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Product_IDColumn {
                get {
                    return this.columnProduct_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Product_NameColumn {
                get {
                    return this.columnProduct_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn BatchColumn {
                get {
                    return this.columnBatch;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SerialColumn {
                get {
                    return this.columnSerial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn UnitPriceColumn {
                get {
                    return this.columnUnitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SortedColumn {
                get {
                    return this.columnSorted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn InRefNoColumn {
                get {
                    return this.columnInRefNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn OutRefNoColumn {
                get {
                    return this.columnOutRefNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn RefDateShowColumn {
                get {
                    return this.columnRefDateShow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn RefTypeColumn {
                get {
                    return this.columnRefType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn RefStatusColumn {
                get {
                    return this.columnRefStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn InQuantityColumn {
                get {
                    return this.columnInQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn OutQuantityColumn {
                get {
                    return this.columnOutQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn RealQuantityColumn {
                get {
                    return this.columnRealQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn E_QuantityColumn {
                get {
                    return this.columnE_Quantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Unit_NameColumn {
                get {
                    return this.columnUnit_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Stock_NameColumn {
                get {
                    return this.columnStock_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ReftypeNameColumn {
                get {
                    return this.columnReftypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public STOCK_CARDRow this[int index] {
                get {
                    return ((STOCK_CARDRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event STOCK_CARDRowChangeEventHandler STOCK_CARDRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event STOCK_CARDRowChangeEventHandler STOCK_CARDRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event STOCK_CARDRowChangeEventHandler STOCK_CARDRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event STOCK_CARDRowChangeEventHandler STOCK_CARDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddSTOCK_CARDRow(STOCK_CARDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public STOCK_CARDRow AddSTOCK_CARDRow(
                        long ID, 
                        string RefNo, 
                        System.DateTime RefDate, 
                        string Stock_ID, 
                        string Product_ID, 
                        string Product_Name, 
                        string Batch, 
                        string Serial, 
                        string Unit, 
                        decimal Price, 
                        decimal Quantity, 
                        decimal UnitPrice, 
                        decimal Amount, 
                        string Description, 
                        long Sorted, 
                        string InRefNo, 
                        string OutRefNo, 
                        System.DateTime RefDateShow, 
                        long RefType, 
                        long RefStatus, 
                        decimal InQuantity, 
                        decimal OutQuantity, 
                        decimal RealQuantity, 
                        decimal E_Quantity, 
                        string Unit_Name, 
                        string Stock_Name, 
                        string ReftypeName) {
                STOCK_CARDRow rowSTOCK_CARDRow = ((STOCK_CARDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        RefNo,
                        RefDate,
                        Stock_ID,
                        Product_ID,
                        Product_Name,
                        Batch,
                        Serial,
                        Unit,
                        Price,
                        Quantity,
                        UnitPrice,
                        Amount,
                        Description,
                        Sorted,
                        InRefNo,
                        OutRefNo,
                        RefDateShow,
                        RefType,
                        RefStatus,
                        InQuantity,
                        OutQuantity,
                        RealQuantity,
                        E_Quantity,
                        Unit_Name,
                        Stock_Name,
                        ReftypeName};
                rowSTOCK_CARDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSTOCK_CARDRow);
                return rowSTOCK_CARDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                STOCK_CARDDataTable cln = ((STOCK_CARDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new STOCK_CARDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnRefNo = base.Columns["RefNo"];
                this.columnRefDate = base.Columns["RefDate"];
                this.columnStock_ID = base.Columns["Stock_ID"];
                this.columnProduct_ID = base.Columns["Product_ID"];
                this.columnProduct_Name = base.Columns["Product_Name"];
                this.columnBatch = base.Columns["Batch"];
                this.columnSerial = base.Columns["Serial"];
                this.columnUnit = base.Columns["Unit"];
                this.columnPrice = base.Columns["Price"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnUnitPrice = base.Columns["UnitPrice"];
                this.columnAmount = base.Columns["Amount"];
                this.columnDescription = base.Columns["Description"];
                this.columnSorted = base.Columns["Sorted"];
                this.columnInRefNo = base.Columns["InRefNo"];
                this.columnOutRefNo = base.Columns["OutRefNo"];
                this.columnRefDateShow = base.Columns["RefDateShow"];
                this.columnRefType = base.Columns["RefType"];
                this.columnRefStatus = base.Columns["RefStatus"];
                this.columnInQuantity = base.Columns["InQuantity"];
                this.columnOutQuantity = base.Columns["OutQuantity"];
                this.columnRealQuantity = base.Columns["RealQuantity"];
                this.columnE_Quantity = base.Columns["E_Quantity"];
                this.columnUnit_Name = base.Columns["Unit_Name"];
                this.columnStock_Name = base.Columns["Stock_Name"];
                this.columnReftypeName = base.Columns["ReftypeName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnRefNo = new global::System.Data.DataColumn("RefNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefNo);
                this.columnRefDate = new global::System.Data.DataColumn("RefDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefDate);
                this.columnStock_ID = new global::System.Data.DataColumn("Stock_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStock_ID);
                this.columnProduct_ID = new global::System.Data.DataColumn("Product_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_ID);
                this.columnProduct_Name = new global::System.Data.DataColumn("Product_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_Name);
                this.columnBatch = new global::System.Data.DataColumn("Batch", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatch);
                this.columnSerial = new global::System.Data.DataColumn("Serial", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSerial);
                this.columnUnit = new global::System.Data.DataColumn("Unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit);
                this.columnPrice = new global::System.Data.DataColumn("Price", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrice);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnUnitPrice = new global::System.Data.DataColumn("UnitPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitPrice);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnSorted = new global::System.Data.DataColumn("Sorted", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSorted);
                this.columnInRefNo = new global::System.Data.DataColumn("InRefNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInRefNo);
                this.columnOutRefNo = new global::System.Data.DataColumn("OutRefNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutRefNo);
                this.columnRefDateShow = new global::System.Data.DataColumn("RefDateShow", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefDateShow);
                this.columnRefType = new global::System.Data.DataColumn("RefType", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefType);
                this.columnRefStatus = new global::System.Data.DataColumn("RefStatus", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefStatus);
                this.columnInQuantity = new global::System.Data.DataColumn("InQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInQuantity);
                this.columnOutQuantity = new global::System.Data.DataColumn("OutQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutQuantity);
                this.columnRealQuantity = new global::System.Data.DataColumn("RealQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealQuantity);
                this.columnE_Quantity = new global::System.Data.DataColumn("E_Quantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnE_Quantity);
                this.columnUnit_Name = new global::System.Data.DataColumn("Unit_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit_Name);
                this.columnStock_Name = new global::System.Data.DataColumn("Stock_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStock_Name);
                this.columnReftypeName = new global::System.Data.DataColumn("ReftypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReftypeName);
                this.columnRefNo.MaxLength = 20;
                this.columnStock_ID.MaxLength = 20;
                this.columnProduct_ID.MaxLength = 20;
                this.columnProduct_Name.MaxLength = 255;
                this.columnBatch.MaxLength = 50;
                this.columnSerial.MaxLength = 50;
                this.columnUnit.MaxLength = 50;
                this.columnDescription.MaxLength = 255;
                this.columnInRefNo.MaxLength = 20;
                this.columnOutRefNo.MaxLength = 20;
                this.columnUnit_Name.MaxLength = 250;
                this.columnStock_Name.MaxLength = 250;
                this.columnReftypeName.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public STOCK_CARDRow NewSTOCK_CARDRow() {
                return ((STOCK_CARDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new STOCK_CARDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(STOCK_CARDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STOCK_CARDRowChanged != null)) {
                    this.STOCK_CARDRowChanged(this, new STOCK_CARDRowChangeEvent(((STOCK_CARDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STOCK_CARDRowChanging != null)) {
                    this.STOCK_CARDRowChanging(this, new STOCK_CARDRowChangeEvent(((STOCK_CARDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STOCK_CARDRowDeleted != null)) {
                    this.STOCK_CARDRowDeleted(this, new STOCK_CARDRowChangeEvent(((STOCK_CARDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STOCK_CARDRowDeleting != null)) {
                    this.STOCK_CARDRowDeleting(this, new STOCK_CARDRowChangeEvent(((STOCK_CARDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveSTOCK_CARDRow(STOCK_CARDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsStock_Card ds = new dsStock_Card();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STOCK_CARDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class STOCK_CARDRow : global::System.Data.DataRow {
            
            private STOCK_CARDDataTable tableSTOCK_CARD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal STOCK_CARDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTOCK_CARD = ((STOCK_CARDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public long ID {
                get {
                    try {
                        return ((long)(this[this.tableSTOCK_CARD.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string RefNo {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_CARD.RefNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefNo\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.RefNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime RefDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTOCK_CARD.RefDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefDate\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.RefDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Stock_ID {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_CARD.Stock_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Stock_ID\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.Stock_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Product_ID {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_CARD.Product_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Product_ID\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.Product_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Product_Name {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_CARD.Product_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Product_Name\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.Product_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Batch {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_CARD.BatchColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Batch\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.BatchColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Serial {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_CARD.SerialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Serial\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.SerialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Unit {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_CARD.UnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.UnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal Price {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_CARD.PriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Price\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.PriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal Quantity {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_CARD.QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quantity\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal UnitPrice {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_CARD.UnitPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitPrice\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.UnitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_CARD.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_CARD.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public long Sorted {
                get {
                    try {
                        return ((long)(this[this.tableSTOCK_CARD.SortedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sorted\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.SortedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string InRefNo {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_CARD.InRefNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InRefNo\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.InRefNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string OutRefNo {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_CARD.OutRefNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutRefNo\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.OutRefNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime RefDateShow {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTOCK_CARD.RefDateShowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefDateShow\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.RefDateShowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public long RefType {
                get {
                    try {
                        return ((long)(this[this.tableSTOCK_CARD.RefTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefType\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.RefTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public long RefStatus {
                get {
                    try {
                        return ((long)(this[this.tableSTOCK_CARD.RefStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefStatus\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.RefStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal InQuantity {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_CARD.InQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InQuantity\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.InQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal OutQuantity {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_CARD.OutQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutQuantity\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.OutQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal RealQuantity {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_CARD.RealQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealQuantity\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.RealQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal E_Quantity {
                get {
                    try {
                        return ((decimal)(this[this.tableSTOCK_CARD.E_QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'E_Quantity\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.E_QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Unit_Name {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_CARD.Unit_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit_Name\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.Unit_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Stock_Name {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_CARD.Stock_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Stock_Name\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.Stock_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ReftypeName {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK_CARD.ReftypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReftypeName\' in table \'STOCK_CARD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK_CARD.ReftypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsIDNull() {
                return this.IsNull(this.tableSTOCK_CARD.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetIDNull() {
                this[this.tableSTOCK_CARD.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsRefNoNull() {
                return this.IsNull(this.tableSTOCK_CARD.RefNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetRefNoNull() {
                this[this.tableSTOCK_CARD.RefNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsRefDateNull() {
                return this.IsNull(this.tableSTOCK_CARD.RefDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetRefDateNull() {
                this[this.tableSTOCK_CARD.RefDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsStock_IDNull() {
                return this.IsNull(this.tableSTOCK_CARD.Stock_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetStock_IDNull() {
                this[this.tableSTOCK_CARD.Stock_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProduct_IDNull() {
                return this.IsNull(this.tableSTOCK_CARD.Product_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProduct_IDNull() {
                this[this.tableSTOCK_CARD.Product_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProduct_NameNull() {
                return this.IsNull(this.tableSTOCK_CARD.Product_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProduct_NameNull() {
                this[this.tableSTOCK_CARD.Product_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsBatchNull() {
                return this.IsNull(this.tableSTOCK_CARD.BatchColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetBatchNull() {
                this[this.tableSTOCK_CARD.BatchColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSerialNull() {
                return this.IsNull(this.tableSTOCK_CARD.SerialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSerialNull() {
                this[this.tableSTOCK_CARD.SerialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsUnitNull() {
                return this.IsNull(this.tableSTOCK_CARD.UnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetUnitNull() {
                this[this.tableSTOCK_CARD.UnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsPriceNull() {
                return this.IsNull(this.tableSTOCK_CARD.PriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetPriceNull() {
                this[this.tableSTOCK_CARD.PriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsQuantityNull() {
                return this.IsNull(this.tableSTOCK_CARD.QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetQuantityNull() {
                this[this.tableSTOCK_CARD.QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsUnitPriceNull() {
                return this.IsNull(this.tableSTOCK_CARD.UnitPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetUnitPriceNull() {
                this[this.tableSTOCK_CARD.UnitPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsAmountNull() {
                return this.IsNull(this.tableSTOCK_CARD.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetAmountNull() {
                this[this.tableSTOCK_CARD.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableSTOCK_CARD.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDescriptionNull() {
                this[this.tableSTOCK_CARD.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSortedNull() {
                return this.IsNull(this.tableSTOCK_CARD.SortedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSortedNull() {
                this[this.tableSTOCK_CARD.SortedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsInRefNoNull() {
                return this.IsNull(this.tableSTOCK_CARD.InRefNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetInRefNoNull() {
                this[this.tableSTOCK_CARD.InRefNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOutRefNoNull() {
                return this.IsNull(this.tableSTOCK_CARD.OutRefNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOutRefNoNull() {
                this[this.tableSTOCK_CARD.OutRefNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsRefDateShowNull() {
                return this.IsNull(this.tableSTOCK_CARD.RefDateShowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetRefDateShowNull() {
                this[this.tableSTOCK_CARD.RefDateShowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsRefTypeNull() {
                return this.IsNull(this.tableSTOCK_CARD.RefTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetRefTypeNull() {
                this[this.tableSTOCK_CARD.RefTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsRefStatusNull() {
                return this.IsNull(this.tableSTOCK_CARD.RefStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetRefStatusNull() {
                this[this.tableSTOCK_CARD.RefStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsInQuantityNull() {
                return this.IsNull(this.tableSTOCK_CARD.InQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetInQuantityNull() {
                this[this.tableSTOCK_CARD.InQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOutQuantityNull() {
                return this.IsNull(this.tableSTOCK_CARD.OutQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOutQuantityNull() {
                this[this.tableSTOCK_CARD.OutQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsRealQuantityNull() {
                return this.IsNull(this.tableSTOCK_CARD.RealQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetRealQuantityNull() {
                this[this.tableSTOCK_CARD.RealQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsE_QuantityNull() {
                return this.IsNull(this.tableSTOCK_CARD.E_QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetE_QuantityNull() {
                this[this.tableSTOCK_CARD.E_QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsUnit_NameNull() {
                return this.IsNull(this.tableSTOCK_CARD.Unit_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetUnit_NameNull() {
                this[this.tableSTOCK_CARD.Unit_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsStock_NameNull() {
                return this.IsNull(this.tableSTOCK_CARD.Stock_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetStock_NameNull() {
                this[this.tableSTOCK_CARD.Stock_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsReftypeNameNull() {
                return this.IsNull(this.tableSTOCK_CARD.ReftypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetReftypeNameNull() {
                this[this.tableSTOCK_CARD.ReftypeNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class STOCK_CARDRowChangeEvent : global::System.EventArgs {
            
            private STOCK_CARDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public STOCK_CARDRowChangeEvent(STOCK_CARDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public STOCK_CARDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Perfect.Inventory.Core.Inventory.StockCard.DS.dsStock_CardTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STOCK_CARDTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public STOCK_CARDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STOCK_CARD";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("RefNo", "RefNo");
            tableMapping.ColumnMappings.Add("RefDate", "RefDate");
            tableMapping.ColumnMappings.Add("Stock_ID", "Stock_ID");
            tableMapping.ColumnMappings.Add("Product_ID", "Product_ID");
            tableMapping.ColumnMappings.Add("Product_Name", "Product_Name");
            tableMapping.ColumnMappings.Add("Batch", "Batch");
            tableMapping.ColumnMappings.Add("Serial", "Serial");
            tableMapping.ColumnMappings.Add("Unit", "Unit");
            tableMapping.ColumnMappings.Add("Price", "Price");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("UnitPrice", "UnitPrice");
            tableMapping.ColumnMappings.Add("Amount", "Amount");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("Sorted", "Sorted");
            tableMapping.ColumnMappings.Add("InRefNo", "InRefNo");
            tableMapping.ColumnMappings.Add("OutRefNo", "OutRefNo");
            tableMapping.ColumnMappings.Add("RefDateShow", "RefDateShow");
            tableMapping.ColumnMappings.Add("RefType", "RefType");
            tableMapping.ColumnMappings.Add("RefStatus", "RefStatus");
            tableMapping.ColumnMappings.Add("InQuantity", "InQuantity");
            tableMapping.ColumnMappings.Add("OutQuantity", "OutQuantity");
            tableMapping.ColumnMappings.Add("RealQuantity", "RealQuantity");
            tableMapping.ColumnMappings.Add("E_Quantity", "E_Quantity");
            tableMapping.ColumnMappings.Add("Unit_Name", "Unit_Name");
            tableMapping.ColumnMappings.Add("Stock_Name", "Stock_Name");
            tableMapping.ColumnMappings.Add("ReftypeName", "ReftypeName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Perfect.Inventory.Core.Properties.Settings.Default.ERP_Sale_2_9_1ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CAST(NULL AS BIGINT) AS ID,\r\n       CAST(NULL AS VARCHAR(20)) AS RefNo,\r\n " +
                "      CAST(NULL AS VARCHAR(20)) AS InRefNo,\r\n       CAST(NULL AS VARCHAR(20)) AS" +
                " OutRefNo,\r\n       CAST(\'1/1/1753\' AS DATETIME) AS RefDate,\r\n       CAST(NULL AS" +
                " DATETIME) AS RefDateShow,\r\n       CAST(NULL AS BIGINT) AS RefType,\r\n       CAST" +
                "(NULL AS BIGINT) AS RefStatus,\r\n       A.Stock_ID,\r\n       A.Product_ID,\r\n      " +
                " CAST(NULL AS NVARCHAR(50)) AS Batch,\t-- a.Batch,\r\n       CAST(NULL AS VARCHAR(5" +
                "0)) AS Serial,\t-- a.Serial,\r\n       A.Unit,\r\n       CAST(NULL AS MONEY) AS Price" +
                ",\r\n       CAST(NULL AS MONEY) AS Quantity,\r\n       CAST(NULL AS MONEY) AS UnitPr" +
                "ice,\r\n       CAST(NULL AS MONEY) AS Amount,\r\n       CAST(NULL AS MONEY) AS InQua" +
                "ntity,\r\n       CAST(NULL AS MONEY) AS OutQuantity,\r\n       A.E_Quantity AS RealQ" +
                "uantity,\r\n       A.E_Quantity AS E_Quantity,\r\n       CAST(-1 AS BIGINT) AS Sorte" +
                "d,\r\n       CAST(NULL AS NVARCHAR(250)) AS Product_Name,\r\n       CAST(NULL AS NVA" +
                "RCHAR(250)) AS Unit_Name,\r\n       CAST(NULL AS NVARCHAR(250)) AS [Description],\r" +
                "\n       CAST(NULL AS NVARCHAR(250)) AS Stock_Name,\r\n       CAST(NULL AS NVARCHAR" +
                "(250)) AS ReftypeName\r\nFROM   (\r\n           SELECT a.Stock_ID,\r\n                " +
                "  a.Product_ID,\r\n                  a.Unit,\r\n                  SUM(a.RealQuantity" +
                ") AS E_Quantity\r\n           FROM   (\r\n                      SELECT id2.Stock_ID," +
                "\r\n                             id2.Product_ID,\r\n                             -- " +
                "      id.Batch,\r\n                             --       id.Serial,\r\n             " +
                "                id2.Unit,\r\n                             CASE id2.RefStatus\r\n    " +
                "                              WHEN 1 THEN id2.Quantity\r\n                        " +
                "          ELSE (id2.Quantity * -1)\r\n                             END AS RealQuan" +
                "tity\r\n                      FROM   INVENTORY_DETAIL id2\r\n                       " +
                "      --                                 WHERE  (\r\n                             " +
                "--                                            DATEDIFF(DAY, @Fromdate, id2.RefDa" +
                "te)\r\n                             --                                            " +
                "< 0\r\n                             --                                            " +
                "OR id2.RefType = 0\r\n                             --                             " +
                "           )\r\n                             --                                   " +
                "     AND id2.Stock_ID = @StockId\r\n                  )a\r\n           GROUP BY\r\n   " +
                "               --       a.Batch,\r\n                  --       a.Serial,\r\n        " +
                "          a.Product_ID,\r\n                  a.Unit,\r\n                  a.Stock_ID" +
                "\r\n       )A";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "--DECLARE @Fromdate DATETIME\r\n--DECLARE @Todate DATETIME\r\n--DECLARE @StockId VARC" +
                "HAR(20)\r\n--\r\n--SET @Fromdate = \'7/16/2012\'\r\n--SET @Todate = \'12/31/2012\'\r\n--SET " +
                "@StockId = \'K000001\'\r\n\r\n\r\nDECLARE @AnotherTbl TABLE(\r\n            ID INT NULL,\r\n" +
                "            RefNo VARCHAR(20) NULL,\r\n            RefDate DATETIME NULL,\r\n       " +
                "     RefType INT NULL,\r\n            RefStatus INT NULL,\r\n            Stock_ID VA" +
                "RCHAR(20) NULL,\r\n            Product_ID VARCHAR(20) NULL,\r\n            Batch NVA" +
                "RCHAR(20) NULL,\r\n            Serial VARCHAR(50) NULL,\r\n            Unit NVARCHAR" +
                "(50) NULL,\r\n            Price MONEY NULL,\r\n            Quantity MONEY NULL,\r\n   " +
                "         UnitPrice MONEY NULL,\r\n            Amount MONEY NULL,\r\n            InQu" +
                "antity MONEY NULL,\r\n            OutQuantity MONEY NULL,\r\n            RealQuantit" +
                "y MONEY NULL,\r\n            E_Quantity MONEY NULL,\r\n            Sorted BIGINT NUL" +
                "L\r\n        )\r\n\r\nDECLARE cs2 CURSOR  \r\nFOR\r\n    SELECT *\r\n    FROM   (\r\n         " +
                "      SELECT CAST(NULL AS BIGINT) AS ID,\r\n                      CAST(NULL AS VAR" +
                "CHAR(20)) AS RefNo,\r\n                      CAST(\'1/1/1753\' AS DATETIME) AS RefDa" +
                "te,\r\n                      CAST(NULL AS BIGINT) AS RefType,\r\n                   " +
                "   CAST(NULL AS BIGINT) AS RefStatus,\r\n                      A.Stock_ID,\r\n      " +
                "                A.Product_ID,\r\n                      CAST(NULL AS NVARCHAR(50)) " +
                "AS Batch,\t-- a.Batch,\r\n                      CAST(NULL AS VARCHAR(50)) AS Serial" +
                ",\t-- a.Serial,\r\n                      A.Unit,\r\n                      CAST(NULL A" +
                "S MONEY) AS Price,\r\n                      CAST(NULL AS MONEY) AS Quantity,\r\n    " +
                "                  CAST(NULL AS MONEY) AS UnitPrice,\r\n                      CAST(" +
                "NULL AS MONEY) AS Amount,\r\n                      CAST(NULL AS MONEY) AS InQuanti" +
                "ty,\r\n                      CAST(NULL AS MONEY) AS OutQuantity,\r\n                " +
                "      A.E_Quantity AS RealQuantity,\r\n                      A.E_Quantity AS E_Qua" +
                "ntity,\r\n                      CAST(-1 AS BIGINT) AS Sorted\r\n               FROM " +
                "  (\r\n                          SELECT a.Stock_ID,\r\n                             " +
                "    a.Product_ID,\r\n                                 a.Unit,\r\n                   " +
                "              SUM(a.RealQuantity) AS E_Quantity\r\n                          FROM " +
                "  (\r\n                                     SELECT id2.Stock_ID,\r\n                " +
                "                            id2.Product_ID,\r\n                                   " +
                "         --       id.Batch,\r\n                                            --     " +
                "  id.Serial,\r\n                                            id2.Unit,\r\n           " +
                "                                 CASE id2.RefStatus\r\n                           " +
                "                      WHEN 1 THEN id2.Quantity\r\n                                " +
                "                 ELSE (id2.Quantity * -1)\r\n                                     " +
                "       END AS RealQuantity\r\n                                     FROM   INVENTOR" +
                "Y_DETAIL id2\r\n                                     WHERE  (\r\n                   " +
                "                             DATEDIFF(DAY, @Fromdate, id2.RefDate) \r\n           " +
                "                                     < 0\r\n                                      " +
                "          OR id2.RefType = 0\r\n                                            )\r\n   " +
                "                                         AND id2.Stock_ID = @StockId\r\n          " +
                "                       )a\r\n                          GROUP BY\r\n                 " +
                "                --       a.Batch,\r\n                                 --       a.S" +
                "erial,\r\n                                 a.Product_ID,\r\n                        " +
                "         a.Unit,\r\n                                 a.Stock_ID\r\n                 " +
                "     )A\r\n               \r\n               UNION ALL\r\n               \r\n           " +
                "    SELECT id.ID,\r\n                      id.RefNo,\r\n                      id.Ref" +
                "Date,\r\n                      id.RefType,\r\n                      id.RefStatus,\r\n " +
                "                     id.Stock_ID,\r\n                      id.Product_ID,\r\n       " +
                "               id.Batch,\r\n                      id.Serial,\r\n                    " +
                "  id.Unit,\r\n                      id.Price,\r\n                      id.Quantity,\r" +
                "\n                      id.UnitPrice,\r\n                      id.Amount,\r\n        " +
                "              CASE id.RefStatus\r\n                           WHEN 1 THEN id.Quant" +
                "ity\r\n                           ELSE CAST(NULL AS MONEY)\r\n                      " +
                "END AS InQuantity,\r\n                      CASE id.RefStatus\r\n                   " +
                "        WHEN 2 THEN id.Quantity\r\n                           ELSE CAST(NULL AS MO" +
                "NEY)\r\n                      END AS OutQuantity,\r\n                      CASE id.R" +
                "efStatus\r\n                           WHEN 1 THEN id.Quantity\r\n                  " +
                "         ELSE (id.Quantity * -1)\r\n                      END AS RealQuantity,\r\n  " +
                "                    CAST(NULL AS MONEY) AS E_Quantity,\r\n                      id" +
                ".Sorted\r\n               FROM   INVENTORY_DETAIL id\r\n               WHERE  DATEDI" +
                "FF(DAY, @Fromdate, id.RefDate) >= 0\r\n                      AND DATEDIFF(DAY, @To" +
                "date, id.RefDate) <= 0\r\n                      AND id.RefType != 0\r\n             " +
                "         AND id.Stock_ID = @StockId\r\n                          --ORDER BY\r\n     " +
                "                     --       id.Product_ID ASC,\r\n                          --  " +
                "     id.RefDate ASC,\r\n                          --       id.Sorted ASC\r\n        " +
                "   )STOCK_CARD\r\n    ORDER BY\r\n           STOCK_CARD.Product_ID ASC,\r\n           " +
                "STOCK_CARD.RefDate ASC,\r\n           STOCK_CARD.Sorted ASC\r\n\r\nOPEN cs2    \r\n\r\nDEC" +
                "LARE @ID BIGINT    \r\nDECLARE @RefNo VARCHAR(20)    \r\nDECLARE @RefDate DATETIME\r\n" +
                "DECLARE @RefType INT\r\nDECLARE @RefStatus INT\r\nDECLARE @Stock_ID VARCHAR(20)    \r" +
                "\nDECLARE @Product_ID VARCHAR(20)    \r\nDECLARE @Batch NVARCHAR(50)\r\nDECLARE @Seri" +
                "al VARCHAR(50)\r\nDECLARE @Unit NVARCHAR(50)\r\nDECLARE @Price MONEY    \r\nDECLARE @Q" +
                "uantity MONEY    \r\nDECLARE @UnitPrice MONEY\r\nDECLARE @Amount MONEY\r\nDECLARE @InQ" +
                "uantity MONEY\r\nDECLARE @OutQuantity INT    \r\nDECLARE @RealQuantity MONEY    \r\nDE" +
                "CLARE @E_Quantity MONEY\r\nDECLARE @Temp VARCHAR(250)\r\nDECLARE @Sorted BIGINT\r\n\r\nD" +
                "ECLARE @Product_ID_Temp VARCHAR(20)\r\nSET @Product_ID_Temp = \'\'\r\n\r\nDECLARE @E_tot" +
                "al MONEY\r\nSET @E_total = 0\r\n    \r\nFETCH NEXT FROM cs2 INTO @ID,@RefNo,@RefDate,@" +
                "RefType,@RefStatus,@Stock_ID,\r\n@Product_ID,\r\n@Batch,\r\n@Serial,@Unit,@Price,@Quan" +
                "tity,@UnitPrice,@Amount,@InQuantity,@OutQuantity,@RealQuantity,\r\n@E_Quantity,@So" +
                "rted\r\nWHILE @@FETCH_STATUS = 0\r\nBEGIN\r\n    IF (@Product_ID_Temp = @Product_ID)\r\n" +
                "    BEGIN\r\n        SET @E_total = @E_total + @RealQuantity\r\n    END\r\n    ELSE\r\n " +
                "   BEGIN\r\n        SET @E_total = @RealQuantity\r\n    END\r\n    SET @Product_ID_Tem" +
                "p = @Product_ID\r\n    INSERT INTO @AnotherTbl\r\n      (\r\n        ID,\r\n        RefN" +
                "o,\r\n        RefDate,\r\n        RefType,\r\n        RefStatus,\r\n        Stock_ID,\r\n " +
                "       Product_ID,\r\n        Batch,\r\n        Serial,\r\n        Unit,\r\n        Pric" +
                "e,\r\n        Quantity,\r\n        UnitPrice,\r\n        Amount,\r\n        InQuantity,\r" +
                "\n        OutQuantity,\r\n        RealQuantity,\r\n        E_Quantity,\r\n        Sorte" +
                "d\r\n      )\r\n    VALUES\r\n      (\r\n        @ID,\r\n        @RefNo,\r\n        @RefDate" +
                ",\r\n        @RefType,\r\n        @RefStatus,\r\n        @Stock_ID,\r\n        @Product_" +
                "ID,\r\n        @Batch,\r\n        @Serial,\r\n        @Unit,\r\n        @Price,\r\n       " +
                " @Quantity,\r\n        @UnitPrice,\r\n        @Amount,\r\n        @InQuantity,\r\n      " +
                "  @OutQuantity,\r\n        @RealQuantity,\r\n        @E_total,\r\n        @Sorted\r\n   " +
                "   )\r\n    \r\n    FETCH NEXT FROM cs2 INTO @ID,@RefNo,@RefDate,@RefType,@RefStatus" +
                ",\r\n    @Stock_ID,@Product_ID,\r\n    @Batch,\r\n    @Serial,@Unit,@Price,@Quantity,@" +
                "UnitPrice,@Amount,@InQuantity,@OutQuantity,@RealQuantity,\r\n    @E_Quantity,@Sort" +
                "ed\r\nEND    \r\nCLOSE cs2    \r\nDEALLOCATE cs2 \r\n\r\nSELECT TB.ID,\r\n       TB.RefNo,\r\n" +
                "       CASE TB.RefStatus\r\n            WHEN 1 THEN TB.RefNo\r\n            ELSE CAS" +
                "T(NULL AS VARCHAR(20))\r\n       END AS InRefNo,\r\n       CASE TB.RefStatus\r\n      " +
                "      WHEN 2 THEN TB.RefNo\r\n            ELSE CAST(NULL AS VARCHAR(20))\r\n       E" +
                "ND AS OutRefNo,\r\n       TB.RefDate,\r\n       CASE \r\n            WHEN TB.ID IS NUL" +
                "L THEN CAST(NULL AS DATETIME)\r\n            ELSE TB.RefDate\r\n       END AS RefDat" +
                "eShow,\r\n       TB.RefType,\r\n       TB.RefStatus,\r\n       TB.Stock_ID,\r\n       TB" +
                ".Product_ID,\r\n       TB.Batch,\r\n       TB.Serial,\r\n       TB.Unit,\r\n       TB.Pr" +
                "ice,\r\n       TB.Quantity,\r\n       TB.UnitPrice,\r\n       TB.Amount,\r\n       TB.In" +
                "Quantity,\r\n       TB.OutQuantity,\r\n       TB.RealQuantity,\r\n       TB.E_Quantity" +
                ",\r\n       TB.Sorted,\r\n       p.Product_Name,\r\n       u.Unit_Name,\r\n       CASE \r" +
                "\n            WHEN TB.ID IS NULL THEN N\'Tồn đầu kỳ\'\r\n            ELSE tr.[Descrip" +
                "tion]\r\n       END AS [Description],\r\n       s.Stock_Name,\r\n       r.[Name] AS Re" +
                "fTypeName\r\nFROM   @AnotherTbl TB\r\n       LEFT OUTER JOIN PRODUCT p\r\n            " +
                "ON  TB.Product_ID = p.Product_ID\r\n       LEFT OUTER JOIN UNIT u\r\n            ON " +
                " TB.Unit = u.Unit_ID\r\n       LEFT OUTER JOIN TRANS_REF tr\r\n            ON  TB.Re" +
                "fNo = tr.RefID\r\n            AND TB.RefType = tr.RefType\r\n       LEFT OUTER JOIN " +
                "STOCK s\r\n            ON  TB.Stock_ID = s.Stock_ID\r\n       LEFT OUTER JOIN REFTYP" +
                "E r\r\n            ON TB.RefType = r.ID\r\nORDER BY\r\n       TB.Product_ID,\r\n       T" +
                "B.RefDate,\r\n       Tb.Sorted";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Fromdate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Todate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StockId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "\r\n--DECLARE @Fromdate DATETIME\r\n--DECLARE @Todate DATETIME\r\n--DECLARE @StockId VA" +
                "RCHAR(20)\r\n--DECLARE @ProductId VARCHAR(20)\r\n--DECLARE @ProductNAME NVARCHAR(250" +
                ")\r\n--\r\n--SET @Fromdate = \'7/16/2012\'\r\n--SET @Todate = \'12/31/2012\'\r\n--SET @Stock" +
                "Id = \'K000001\'\r\n--SET @ProductId = \'HH000001\'\r\n--SET @ProductNAME = N\'Thuốc cảm\'" +
                "\r\n\r\n\r\nDECLARE @AnotherTbl TABLE(\r\n            ID INT NULL,\r\n            RefNo VA" +
                "RCHAR(20) NULL,\r\n            RefDate DATETIME NULL,\r\n            RefType INT NUL" +
                "L,\r\n            RefStatus INT NULL,\r\n            Stock_ID VARCHAR(20) NULL,\r\n   " +
                "         Product_ID VARCHAR(20) NULL,\r\n            Batch NVARCHAR(20) NULL,\r\n   " +
                "         Serial VARCHAR(50) NULL,\r\n            Unit NVARCHAR(50) NULL,\r\n        " +
                "    Price MONEY NULL,\r\n            Quantity MONEY NULL,\r\n            UnitPrice M" +
                "ONEY NULL,\r\n            Amount MONEY NULL,\r\n            InQuantity MONEY NULL,\r\n" +
                "            OutQuantity MONEY NULL,\r\n            RealQuantity MONEY NULL,\r\n     " +
                "       E_Quantity MONEY NULL,\r\n            Sorted BIGINT NULL\r\n        )\r\n\r\nDECL" +
                "ARE cs2 CURSOR  \r\nFOR\r\n    SELECT *\r\n    FROM   (\r\n               SELECT CAST(NU" +
                "LL AS BIGINT) AS ID,\r\n                      CAST(NULL AS VARCHAR(20)) AS RefNo,\r" +
                "\n                      CAST(\'1/1/1753\' AS DATETIME) AS RefDate,\r\n               " +
                "       CAST(NULL AS BIGINT) AS RefType,\r\n                      CAST(NULL AS BIGI" +
                "NT) AS RefStatus,\r\n                      A.Stock_ID,\r\n                      A.Pr" +
                "oduct_ID,\r\n                      CAST(NULL AS NVARCHAR(50)) AS Batch,\t-- a.Batch" +
                ",\r\n                      CAST(NULL AS VARCHAR(50)) AS Serial,\t-- a.Serial,\r\n    " +
                "                  A.Unit,\r\n                      CAST(NULL AS MONEY) AS Price,\r\n" +
                "                      CAST(NULL AS MONEY) AS Quantity,\r\n                      CA" +
                "ST(NULL AS MONEY) AS UnitPrice,\r\n                      CAST(NULL AS MONEY) AS Am" +
                "ount,\r\n                      CAST(NULL AS MONEY) AS InQuantity,\r\n               " +
                "       CAST(NULL AS MONEY) AS OutQuantity,\r\n                      A.E_Quantity A" +
                "S RealQuantity,\r\n                      A.E_Quantity AS E_Quantity,\r\n            " +
                "          CAST(-1 AS BIGINT) AS Sorted\r\n               FROM   (\r\n               " +
                "           SELECT a.Stock_ID,\r\n                                 a.Product_ID,\r\n " +
                "                                a.Unit,\r\n                                 SUM(a." +
                "RealQuantity) AS E_Quantity\r\n                          FROM   (\r\n               " +
                "                      SELECT id2.Stock_ID,\r\n                                    " +
                "        id2.Product_ID,\r\n                                            --       id" +
                ".Batch,\r\n                                            --       id.Serial,\r\n      " +
                "                                      id2.Unit,\r\n                               " +
                "             CASE id2.RefStatus\r\n                                               " +
                "  WHEN 1 THEN id2.Quantity\r\n                                                 ELS" +
                "E (id2.Quantity * -1)\r\n                                            END AS RealQu" +
                "antity\r\n                                     FROM   INVENTORY_DETAIL id2\r\n      " +
                "                               WHERE  (\r\n                                       " +
                "         DATEDIFF(DAY, @Fromdate, id2.RefDate) \r\n                               " +
                "                 < 0\r\n                                                OR id2.Ref" +
                "Type = 0\r\n                                            )\r\n                       " +
                "                     AND id2.Stock_ID = @StockId\r\n                              " +
                "              AND id2.Product_ID LIKE  @ProductId\r\n                             " +
                "               AND id2.Product_Name LIKE @ProductNAME\r\n                         " +
                "        )a\r\n                          GROUP BY\r\n                                " +
                " --       a.Batch,\r\n                                 --       a.Serial,\r\n       " +
                "                          a.Product_ID,\r\n                                 a.Unit" +
                ",\r\n                                 a.Stock_ID\r\n                      )A\r\n      " +
                "         \r\n               UNION ALL\r\n               \r\n               SELECT id.I" +
                "D,\r\n                      id.RefNo,\r\n                      id.RefDate,\r\n        " +
                "              id.RefType,\r\n                      id.RefStatus,\r\n                " +
                "      id.Stock_ID,\r\n                      id.Product_ID,\r\n                      " +
                "id.Batch,\r\n                      id.Serial,\r\n                      id.Unit,\r\n   " +
                "                   id.Price,\r\n                      id.Quantity,\r\n              " +
                "        id.UnitPrice,\r\n                      id.Amount,\r\n                      C" +
                "ASE id.RefStatus\r\n                           WHEN 1 THEN id.Quantity\r\n          " +
                "                 ELSE CAST(NULL AS MONEY)\r\n                      END AS InQuanti" +
                "ty,\r\n                      CASE id.RefStatus\r\n                           WHEN 2 " +
                "THEN id.Quantity\r\n                           ELSE CAST(NULL AS MONEY)\r\n         " +
                "             END AS OutQuantity,\r\n                      CASE id.RefStatus\r\n     " +
                "                      WHEN 1 THEN id.Quantity\r\n                           ELSE (" +
                "id.Quantity * -1)\r\n                      END AS RealQuantity,\r\n                 " +
                "     CAST(NULL AS MONEY) AS E_Quantity,\r\n                      id.Sorted\r\n      " +
                "         FROM   INVENTORY_DETAIL id\r\n               WHERE  DATEDIFF(DAY, @Fromda" +
                "te, id.RefDate) >= 0\r\n                      AND DATEDIFF(DAY, @Todate, id.RefDat" +
                "e) <= 0\r\n                      AND id.RefType != 0\r\n                      AND id" +
                ".Stock_ID = @StockId\r\n                      AND id.Product_ID LIKE @ProductId\r\n " +
                "                     AND id.Product_Name LIKE @ProductNAME\r\n                    " +
                "      --ORDER BY\r\n                          --       id.Product_ID ASC,\r\n       " +
                "                   --       id.RefDate ASC,\r\n                          --       " +
                "id.Sorted ASC\r\n           )STOCK_CARD\r\n    ORDER BY\r\n           STOCK_CARD.Produ" +
                "ct_ID ASC,\r\n           STOCK_CARD.RefDate ASC,\r\n           STOCK_CARD.Sorted ASC" +
                "\r\n\r\nOPEN cs2    \r\n\r\nDECLARE @ID BIGINT    \r\nDECLARE @RefNo VARCHAR(20)    \r\nDECL" +
                "ARE @RefDate DATETIME\r\nDECLARE @RefType INT\r\nDECLARE @RefStatus INT\r\nDECLARE @St" +
                "ock_ID VARCHAR(20)    \r\nDECLARE @Product_ID VARCHAR(20)    \r\nDECLARE @Batch NVAR" +
                "CHAR(50)\r\nDECLARE @Serial VARCHAR(50)\r\nDECLARE @Unit NVARCHAR(50)\r\nDECLARE @Pric" +
                "e MONEY    \r\nDECLARE @Quantity MONEY    \r\nDECLARE @UnitPrice MONEY\r\nDECLARE @Amo" +
                "unt MONEY\r\nDECLARE @InQuantity MONEY\r\nDECLARE @OutQuantity INT    \r\nDECLARE @Rea" +
                "lQuantity MONEY    \r\nDECLARE @E_Quantity MONEY\r\nDECLARE @Temp VARCHAR(250)\r\nDECL" +
                "ARE @Sorted BIGINT\r\n\r\nDECLARE @Product_ID_Temp VARCHAR(20)\r\nSET @Product_ID_Temp" +
                " = \'\'\r\n\r\nDECLARE @E_total MONEY\r\nSET @E_total = 0\r\n    \r\nFETCH NEXT FROM cs2 INT" +
                "O @ID,@RefNo,@RefDate,@RefType,@RefStatus,@Stock_ID,\r\n@Product_ID,\r\n@Batch,\r\n@Se" +
                "rial,@Unit,@Price,@Quantity,@UnitPrice,@Amount,@InQuantity,@OutQuantity,@RealQua" +
                "ntity,\r\n@E_Quantity,@Sorted\r\nWHILE @@FETCH_STATUS = 0\r\nBEGIN\r\n    IF (@Product_I" +
                "D_Temp = @Product_ID)\r\n    BEGIN\r\n        SET @E_total = @E_total + @RealQuantit" +
                "y\r\n    END\r\n    ELSE\r\n    BEGIN\r\n        SET @E_total = @RealQuantity\r\n    END\r\n" +
                "    SET @Product_ID_Temp = @Product_ID\r\n    INSERT INTO @AnotherTbl\r\n      (\r\n  " +
                "      ID,\r\n        RefNo,\r\n        RefDate,\r\n        RefType,\r\n        RefStatus" +
                ",\r\n        Stock_ID,\r\n        Product_ID,\r\n        Batch,\r\n        Serial,\r\n    " +
                "    Unit,\r\n        Price,\r\n        Quantity,\r\n        UnitPrice,\r\n        Amount" +
                ",\r\n        InQuantity,\r\n        OutQuantity,\r\n        RealQuantity,\r\n        E_Q" +
                "uantity,\r\n        Sorted\r\n      )\r\n    VALUES\r\n      (\r\n        @ID,\r\n        @R" +
                "efNo,\r\n        @RefDate,\r\n        @RefType,\r\n        @RefStatus,\r\n        @Stock" +
                "_ID,\r\n        @Product_ID,\r\n        @Batch,\r\n        @Serial,\r\n        @Unit,\r\n " +
                "       @Price,\r\n        @Quantity,\r\n        @UnitPrice,\r\n        @Amount,\r\n     " +
                "   @InQuantity,\r\n        @OutQuantity,\r\n        @RealQuantity,\r\n        @E_total" +
                ",\r\n        @Sorted\r\n      )\r\n    \r\n    FETCH NEXT FROM cs2 INTO @ID,@RefNo,@RefD" +
                "ate,@RefType,@RefStatus,\r\n    @Stock_ID,@Product_ID,\r\n    @Batch,\r\n    @Serial,@" +
                "Unit,@Price,@Quantity,@UnitPrice,@Amount,@InQuantity,@OutQuantity,@RealQuantity," +
                "\r\n    @E_Quantity,@Sorted\r\nEND    \r\nCLOSE cs2    \r\nDEALLOCATE cs2 \r\n\r\nSELECT TB." +
                "ID,\r\n       TB.RefNo,\r\n       CASE TB.RefStatus\r\n            WHEN 1 THEN TB.RefN" +
                "o\r\n            ELSE CAST(NULL AS VARCHAR(20))\r\n       END AS InRefNo,\r\n       CA" +
                "SE TB.RefStatus\r\n            WHEN 2 THEN TB.RefNo\r\n            ELSE CAST(NULL AS" +
                " VARCHAR(20))\r\n       END AS OutRefNo,\r\n       TB.RefDate,\r\n       CASE \r\n      " +
                "      WHEN TB.ID IS NULL THEN CAST(NULL AS DATETIME)\r\n            ELSE TB.RefDat" +
                "e\r\n       END AS RefDateShow,\r\n       TB.RefType,\r\n       TB.RefStatus,\r\n       " +
                "TB.Stock_ID,\r\n       TB.Product_ID,\r\n       TB.Batch,\r\n       TB.Serial,\r\n      " +
                " TB.Unit,\r\n       TB.Price,\r\n       TB.Quantity,\r\n       TB.UnitPrice,\r\n       T" +
                "B.Amount,\r\n       TB.InQuantity,\r\n       TB.OutQuantity,\r\n       TB.RealQuantity" +
                ",\r\n       TB.E_Quantity,\r\n       TB.Sorted,\r\n       p.Product_Name,\r\n       u.Un" +
                "it_Name,\r\n       CASE \r\n            WHEN TB.ID IS NULL THEN N\'Tồn đầu kỳ\'\r\n     " +
                "       ELSE tr.[Description]\r\n       END AS [Description],\r\n       s.Stock_Name," +
                "\r\n       r.[Name] AS RefTypeName\r\nFROM   @AnotherTbl TB\r\n       LEFT OUTER JOIN " +
                "PRODUCT p\r\n            ON  TB.Product_ID = p.Product_ID\r\n       LEFT OUTER JOIN " +
                "UNIT u\r\n            ON  TB.Unit = u.Unit_ID\r\n       LEFT OUTER JOIN TRANS_REF tr" +
                "\r\n            ON  TB.RefNo = tr.RefID\r\n            AND TB.RefType = tr.RefType\r\n" +
                "       LEFT OUTER JOIN STOCK s\r\n            ON  TB.Stock_ID = s.Stock_ID\r\n      " +
                " LEFT OUTER JOIN REFTYPE r\r\n            ON TB.RefType = r.ID\r\nORDER BY\r\n       T" +
                "B.Product_ID,\r\n       TB.RefDate,\r\n       Tb.Sorted";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Fromdate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Todate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StockId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProductId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProductNAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsStock_Card.STOCK_CARDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsStock_Card.STOCK_CARDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dsStock_Card.STOCK_CARDDataTable dataTable = new dsStock_Card.STOCK_CARDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillAllProduct(dsStock_Card.STOCK_CARDDataTable dataTable, System.DateTime Fromdate, System.DateTime Todate, string StockId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(Fromdate));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(Todate));
            if ((StockId == null)) {
                throw new global::System.ArgumentNullException("StockId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(StockId));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual dsStock_Card.STOCK_CARDDataTable GetDataBy(System.DateTime Fromdate, System.DateTime Todate, string StockId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(Fromdate));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(Todate));
            if ((StockId == null)) {
                throw new global::System.ArgumentNullException("StockId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(StockId));
            }
            dsStock_Card.STOCK_CARDDataTable dataTable = new dsStock_Card.STOCK_CARDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillOneProduct(dsStock_Card.STOCK_CARDDataTable dataTable, System.DateTime Fromdate, System.DateTime Todate, string StockId, string ProductId, string ProductNAME) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(Fromdate));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(Todate));
            if ((StockId == null)) {
                throw new global::System.ArgumentNullException("StockId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(StockId));
            }
            if ((ProductId == null)) {
                throw new global::System.ArgumentNullException("ProductId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(ProductId));
            }
            if ((ProductNAME == null)) {
                throw new global::System.ArgumentNullException("ProductNAME");
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(ProductNAME));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual dsStock_Card.STOCK_CARDDataTable GetDataBy1(System.DateTime Fromdate, System.DateTime Todate, string StockId, string ProductId, string ProductNAME) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(Fromdate));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(Todate));
            if ((StockId == null)) {
                throw new global::System.ArgumentNullException("StockId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(StockId));
            }
            if ((ProductId == null)) {
                throw new global::System.ArgumentNullException("ProductId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(ProductId));
            }
            if ((ProductNAME == null)) {
                throw new global::System.ArgumentNullException("ProductNAME");
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(ProductNAME));
            }
            dsStock_Card.STOCK_CARDDataTable dataTable = new dsStock_Card.STOCK_CARDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateUpdatedRows(dsStock_Card dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateInsertedRows(dsStock_Card dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateDeletedRows(dsStock_Card dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public virtual int UpdateAll(dsStock_Card dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591